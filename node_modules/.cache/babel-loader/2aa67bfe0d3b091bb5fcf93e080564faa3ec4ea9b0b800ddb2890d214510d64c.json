{"ast":null,"code":"var _jsxFileName = \"/Users/ericbollar/Desktop/BollarQuickenProject/src/components/TurtleGame.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useKeyboard } from '../hooks/useKeyboard';\nimport styles from '../styles.js';\n\n// local turtle attributes used for calculations\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst localTurtle = {\n  x: 360,\n  y: 200,\n  angle: 0,\n  moving: false,\n  turningLeft: false,\n  turningRight: false,\n  penDown: false,\n  drawingStar: false\n};\n\n// TurtleGame class which handles the drawing and calculations of Turtle\n// Improvement here would be separating Canvas and Turtle into two separate\n// classes. It would make the code much cleaner\n\nconst TurtleGame = _ref => {\n  _s();\n  let {\n    width,\n    height\n  } = _ref;\n  // this allows access to the graphics context\n  const canvasRef = useRef(null);\n  const canvas = canvasRef.current;\n  if (!canvas) {\n    return;\n  }\n  ;\n  const ctx = canvas.getContext('2d');\n  if (!ctx) {\n    return;\n  }\n  ;\n\n  // stored turtle attributes\n  const [x, setX] = useState(localTurtle.x);\n  const [y, setY] = useState(localTurtle.y);\n  const [angle, setAngle] = useState(localTurtle.angle);\n\n  // grab deconstructed list of actions from keyboard listener\n  const {\n    KeyW,\n    KeyA,\n    KeyD,\n    Space,\n    Digit1\n  } = useKeyboard();\n\n  // update moving when KeyW key changes\n  useEffect(() => {\n    localTurtle.moving = KeyW;\n  }, [KeyW]);\n\n  // update turningLeft when KeyA key changes\n  useEffect(() => {\n    localTurtle.turningLeft = KeyA;\n  }, [KeyA]);\n\n  // update turningRight when KeyD key changes\n  useEffect(() => {\n    localTurtle.turningRight = KeyD;\n  }, [KeyD]);\n\n  // update penDown when Space key changes\n  useEffect(() => {\n    localTurtle.penDown = Space;\n  }, [Space]);\n\n  // update drawStar when 1 key changes\n  useEffect(() => {\n    localTurtle.drawingStar = Digit1;\n  }, [Digit1]);\n  function updateRotation() {\n    // if turning, update the turtle's angle\n    const rotationSpeed = 0.01;\n    // this is really turning distance, the speed is dependent on how fast each frame renders\n    let updatedAngle = localTurtle.angle - (localTurtle.turningLeft ? rotationSpeed : 0) + (localTurtle.turningRight ? rotationSpeed : 0);\n    // want to restrict angle between 0 and 360 \n    while (updatedAngle > 360) {\n      updatedAngle -= 360;\n    }\n    while (updatedAngle < 0) {\n      updatedAngle += 360;\n    }\n    localTurtle.angle = updatedAngle;\n    setAngle(localTurtle.angle);\n  }\n  function updatePosition() {\n    // if moving forward, update the turtle's position based on it's local forward direction\n    const movementSpeed = .005;\n    // this is really movement distance (similar to rotation), the speed is dependent on how fast each frame renders\n    // so it is likely the case that when drawing, the turtle moves slower (rendering takes more processing)\n    // this is not the best way to do it, but for time's sake i will leave it like this\n    // improvement here would be separating the thread for movement and rendering\n    let updatedPositionX = Math.cos(localTurtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + localTurtle.x;\n    let updatedPositionY = Math.sin(localTurtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + localTurtle.y;\n    if (localTurtle.moving) {\n      // if drawing, draw! don't want to be drawing pen and star at same time, so prioritize line\n      if (localTurtle.penDown) {\n        drawForward(movementSpeed);\n      } else if (localTurtle.drawingStar) {\n        drawStar();\n      }\n\n      // keeps the turtle within the bounds of the canvas, I set this edgeGap arbitrarily\n      // it's a bit finniky because the turtle's position is not the center of the triangle\n      // improvement here would involve re-aligning the center of turtle\n      const edgeGap = 5;\n      if (updatedPositionX > width - edgeGap) {\n        updatedPositionX = edgeGap;\n      } else if (updatedPositionX < edgeGap) {\n        updatedPositionX = width - edgeGap;\n      }\n      if (updatedPositionY > height - edgeGap) {\n        updatedPositionY = edgeGap;\n      } else if (updatedPositionY < edgeGap) {\n        updatedPositionY = height - edgeGap;\n      }\n      localTurtle.x = updatedPositionX;\n      localTurtle.y = updatedPositionY;\n    } else if (localTurtle.drawingStar) {\n      drawStar();\n    }\n    setX(localTurtle.x);\n    setY(localTurtle.y);\n  }\n  setInterval(() => {\n    updatePosition();\n    updateRotation();\n  }, 50);\n\n  // draws a line of given length from turtle in forward direction\n  function drawForward(length) {\n    // draw the line\n    const angleInRadians = localTurtle.angle * Math.PI / 180;\n    let x1 = localTurtle.x + length * Math.sin(angleInRadians);\n    let y1 = localTurtle.y + length * Math.cos(angleInRadians);\n    ctx.beginPath();\n    ctx.lineWidth = 5;\n    ctx.strokeStyle = '#000000';\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(localTurtle.x, localTurtle.y);\n    ctx.stroke();\n\n    // return the endpoints (helpful in drawStar)\n    // this is a bit hacky and could be cleaned up\n    // improvement would be to separate drawing functions from turtlegame entirely\n    return {\n      x1,\n      y1\n    };\n  }\n\n  // draw a star at turtle's position\n  function drawStar() {\n    var i;\n    for (i = 0; i < 18; i++) {\n      localTurtle.angle += 100;\n\n      // grab endpoints of drawForward and re-assign turtle's position\n      const {\n        x1,\n        y1\n      } = drawForward(80);\n      if (x1 && y1) {\n        localTurtle.x = x1;\n        localTurtle.y = y1;\n      }\n    }\n  }\n  ;\n  function resetCanvas() {\n    // if (canvas && canvas.getContext) {\n    //     //         const context = canvas.getContext(\"2d\");\n    //     //         context.clearRect(0, 0, canvas.width, canvas.height);\n    //     //         turtle.x = 360;\n    //     //         turtle.y = 200;\n    //     //     }\n  }\n\n  // return the canvas element and reset button\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      style: styles.button,\n      onClick: resetCanvas,\n      children: \"Reset Canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        ...styles.canvasWrapper,\n        width: width + 2,\n        height: height + 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          ...styles.turtle,\n          left: x,\n          top: y,\n          transform: `rotate(${angle}DEG)`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        width: width + 2,\n        height: height + 2,\n        ref: canvasRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(TurtleGame, \"CYXQyhk46Wpna84sbaTBgmC7w3I=\", false, function () {\n  return [useKeyboard];\n});\n_c = TurtleGame;\nexport default TurtleGame;\nvar _c;\n$RefreshReg$(_c, \"TurtleGame\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useKeyboard","styles","localTurtle","x","y","angle","moving","turningLeft","turningRight","penDown","drawingStar","TurtleGame","width","height","canvasRef","canvas","current","ctx","getContext","setX","setY","setAngle","KeyW","KeyA","KeyD","Space","Digit1","updateRotation","rotationSpeed","updatedAngle","updatePosition","movementSpeed","updatedPositionX","Math","cos","PI","updatedPositionY","sin","drawForward","drawStar","edgeGap","setInterval","length","angleInRadians","x1","y1","beginPath","lineWidth","strokeStyle","moveTo","lineTo","stroke","i","resetCanvas","button","canvasWrapper","turtle","left","top","transform"],"sources":["/Users/ericbollar/Desktop/BollarQuickenProject/src/components/TurtleGame.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport { useKeyboard } from '../hooks/useKeyboard';\nimport styles from '../styles.js';\n\n// local turtle attributes used for calculations\nconst localTurtle = {\n    x: 360,\n    y: 200,\n    angle: 0,\n    moving: false,\n    turningLeft: false,\n    turningRight: false,\n    penDown: false,\n    drawingStar: false,\n}\n\n// TurtleGame class which handles the drawing and calculations of Turtle\n// Improvement here would be separating Canvas and Turtle into two separate\n// classes. It would make the code much cleaner\n\nconst TurtleGame = ({width, height}) => {\n\n    // this allows access to the graphics context\n    const canvasRef = useRef(null);\n    const canvas = canvasRef.current;\n    if (!canvas) { return };\n    const ctx = canvas.getContext('2d');\n    if (!ctx) { return };\n\n    // stored turtle attributes\n    const [x, setX] = useState(localTurtle.x);\n    const [y, setY] = useState(localTurtle.y);\n    const [angle, setAngle] = useState(localTurtle.angle);\n\n    // grab deconstructed list of actions from keyboard listener\n    const {KeyW, KeyA, KeyD, Space, Digit1} = useKeyboard();\n\n    // update moving when KeyW key changes\n    useEffect(() => {\n        localTurtle.moving = KeyW;\n    }, [KeyW])\n\n    // update turningLeft when KeyA key changes\n    useEffect(() => {\n        localTurtle.turningLeft = KeyA;\n    }, [KeyA])\n\n    // update turningRight when KeyD key changes\n    useEffect(() => {\n        localTurtle.turningRight = KeyD;\n    }, [KeyD])\n\n    // update penDown when Space key changes\n    useEffect(() => {\n        localTurtle.penDown = Space;\n    }, [Space])\n\n    // update drawStar when 1 key changes\n    useEffect(() => {\n        localTurtle.drawingStar = Digit1;\n    }, [Digit1])\n\n    function updateRotation() {\n        // if turning, update the turtle's angle\n        const rotationSpeed = 0.01;\n            // this is really turning distance, the speed is dependent on how fast each frame renders\n        let updatedAngle = localTurtle.angle\n            - (localTurtle.turningLeft ? rotationSpeed : 0)\n            + (localTurtle.turningRight ? rotationSpeed : 0);\n        // want to restrict angle between 0 and 360 \n        while (updatedAngle > 360) {\n            updatedAngle -= 360;\n        }\n        while (updatedAngle < 0) {\n            updatedAngle += 360\n        }\n        localTurtle.angle = updatedAngle;\n\n        setAngle(localTurtle.angle);\n    }\n\n    function updatePosition() {\n        // if moving forward, update the turtle's position based on it's local forward direction\n        const movementSpeed = .005; \n            // this is really movement distance (similar to rotation), the speed is dependent on how fast each frame renders\n            // so it is likely the case that when drawing, the turtle moves slower (rendering takes more processing)\n            // this is not the best way to do it, but for time's sake i will leave it like this\n            // improvement here would be separating the thread for movement and rendering\n        let updatedPositionX = Math.cos(localTurtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + localTurtle.x;\n        let updatedPositionY = Math.sin(localTurtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + localTurtle.y;\n        if (localTurtle.moving) {\n            // if drawing, draw! don't want to be drawing pen and star at same time, so prioritize line\n            if (localTurtle.penDown) {\n                drawForward(movementSpeed);\n            } else if (localTurtle.drawingStar) {\n                drawStar();\n            }\n    \n            // keeps the turtle within the bounds of the canvas, I set this edgeGap arbitrarily\n            // it's a bit finniky because the turtle's position is not the center of the triangle\n            // improvement here would involve re-aligning the center of turtle\n            const edgeGap = 5;\n            if (updatedPositionX > width - edgeGap) {\n                updatedPositionX = edgeGap;\n            } else if (updatedPositionX < edgeGap) {\n                updatedPositionX = width - edgeGap;\n            }\n            if (updatedPositionY > height - edgeGap) {\n                updatedPositionY = edgeGap;\n            } else if (updatedPositionY < edgeGap) {\n                updatedPositionY = height - edgeGap;\n            }\n    \n            localTurtle.x = updatedPositionX;\n            localTurtle.y = updatedPositionY;\n        } else if (localTurtle.drawingStar) {\n            drawStar();\n        }\n\n        setX(localTurtle.x);\n        setY(localTurtle.y);\n    }\n\n    setInterval(() => {\n        updatePosition();\n        updateRotation();\n    }, 50);\n\n    // draws a line of given length from turtle in forward direction\n    function drawForward(length) {\n        // draw the line\n        const angleInRadians = (localTurtle.angle * Math.PI) / 180;\n        let x1 = localTurtle.x + length * Math.sin(angleInRadians);\n        let y1 = localTurtle.y + length * Math.cos(angleInRadians);\n        ctx.beginPath();\n        ctx.lineWidth = 5;\n        ctx.strokeStyle = '#000000';\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(localTurtle.x, localTurtle.y);\n        ctx.stroke();\n\n        // return the endpoints (helpful in drawStar)\n        // this is a bit hacky and could be cleaned up\n        // improvement would be to separate drawing functions from turtlegame entirely\n        return {x1, y1};\n    }\n\n    // draw a star at turtle's position\n    function drawStar() {\n        var i;\n        for (i = 0; i < 18; i++) {\n            localTurtle.angle += 100;\n\n            // grab endpoints of drawForward and re-assign turtle's position\n            const {x1, y1} = drawForward(80);\n            if (x1 && y1) {\n                localTurtle.x = x1;\n                localTurtle.y = y1;\n            }\n        }\n    };\n\n    function resetCanvas() {\n        // if (canvas && canvas.getContext) {\n        //     //         const context = canvas.getContext(\"2d\");\n        //     //         context.clearRect(0, 0, canvas.width, canvas.height);\n        //     //         turtle.x = 360;\n        //     //         turtle.y = 200;\n        //     //     }\n    }\n    \n    // return the canvas element and reset button\n    return <>\n        <button style={styles.button} onClick={resetCanvas}>\n            Reset Canvas\n        </button>\n            \n        <div style={{...styles.canvasWrapper, width: width + 2, height: height + 2 }}>\n            <div\n                style={{\n                    ...styles.turtle,\n                    left: x,\n                    top: y,\n                    transform: `rotate(${angle}DEG)`,\n                }}\n            />\n            <canvas width={width + 2} height={height+2}  ref={canvasRef}/>\n        </div>\n    </>\n}\n\nexport default TurtleGame;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}