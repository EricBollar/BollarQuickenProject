{"ast":null,"code":"var _jsxFileName = \"/Users/ericbollar/Desktop/BollarQuickenProject/src/TurtleGame.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport { useKeyboard } from './hooks/useKeyboard';\nimport { Turtle } from './Turtle';\nimport styles from './styles.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TurtleGame = props => {\n  _s();\n  // grab deconstruct turtle values\n  const {\n    x,\n    y,\n    angle,\n    penDown,\n    penColor,\n    lineWidth\n  } = Turtle();\n\n  // dimensions of canvas\n  const width = 800;\n  const height = 480;\n\n  // this allows us to access the graphics context\n  const canvasRef = useRef(null);\n\n  // this is our game loop\n  const draw = (ctx, frameCount) => {\n    console.log(frameCount);\n    drawLine(ctx, frameCount);\n  };\n  useEffect(() => {\n    // get the graphics context\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    let frameCount = 0;\n    let animationFrameId;\n\n    // draw the current frame\n    const render = () => {\n      frameCount++;\n      draw(context, frameCount);\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n    render();\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [draw]); // called when draw changes\n\n  function drawLine(ctx, length) {\n    let x0 = x,\n      y0 = y;\n    const angleInRadians = angle * Math.PI / 180;\n    let x1 = x + length * Math.sin(angleInRadians);\n    let y1 = y + length * Math.cos(angleInRadians);\n    ctx.beginPath();\n    ctx.lineWidth = lineWidth;\n    ctx.strokeStyle = penColor;\n    ctx.moveTo(x0, y0);\n    ctx.lineTo(x1, y1);\n    ctx.stroke();\n  }\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      ...styles.canvasWrapper,\n      width: width + 2,\n      height: height + 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        ...styles.turtle,\n        left: x,\n        top: y,\n        transform: `rotate(${angle}DEG)`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 12\n  }, this);\n};\n_s(TurtleGame, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = TurtleGame;\nexport default TurtleGame;\nvar _c;\n$RefreshReg$(_c, \"TurtleGame\");","map":{"version":3,"names":["React","useRef","useEffect","useKeyboard","Turtle","styles","TurtleGame","props","x","y","angle","penDown","penColor","lineWidth","width","height","canvasRef","draw","ctx","frameCount","console","log","drawLine","canvas","current","context","getContext","animationFrameId","render","window","requestAnimationFrame","cancelAnimationFrame","length","x0","y0","angleInRadians","Math","PI","x1","sin","y1","cos","beginPath","strokeStyle","moveTo","lineTo","stroke","canvasWrapper","turtle","left","top","transform"],"sources":["/Users/ericbollar/Desktop/BollarQuickenProject/src/TurtleGame.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react'\nimport { useKeyboard } from './hooks/useKeyboard';\nimport { Turtle } from './Turtle';\nimport styles from './styles.js';\n\nconst TurtleGame = props => {\n\n    // grab deconstruct turtle values\n    const {x, y, angle, penDown, penColor, lineWidth} = Turtle();\n\n    // dimensions of canvas\n    const width = 800;\n    const height = 480;\n\n    // this allows us to access the graphics context\n    const canvasRef = useRef(null)\n    \n    // this is our game loop\n    const draw = (ctx, frameCount) => {\n        console.log(frameCount);\n        drawLine(ctx, frameCount);\n    }\n    \n    useEffect(() => {\n        // get the graphics context\n        const canvas = canvasRef.current\n        const context = canvas.getContext('2d')\n        let frameCount = 0\n        let animationFrameId\n        \n        // draw the current frame\n        const render = () => {\n            frameCount++\n            draw(context, frameCount)\n            animationFrameId = window.requestAnimationFrame(render)\n        }\n        render()\n        \n        return () => {\n            window.cancelAnimationFrame(animationFrameId)\n        }\n    }, [draw]) // called when draw changes\n\n    function drawLine(ctx, length) {\n        let x0 = x,\n            y0 = y;\n        const angleInRadians = (angle * Math.PI) / 180;\n        let x1 = x + length * Math.sin(angleInRadians);\n        let y1 = y + length * Math.cos(angleInRadians);\n        ctx.beginPath();\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = penColor;\n        ctx.moveTo(x0, y0);\n        ctx.lineTo(x1, y1);\n        ctx.stroke();\n    };\n    \n    return <div style={{...styles.canvasWrapper, width: width + 2, height: height + 2 }}>\n        <div\n            style={{\n                ...styles.turtle,\n                left: x,\n                top: y,\n                transform: `rotate(${angle}DEG)`,\n            }}\n        />\n        <canvas ref={canvasRef} {...props}/>\n    </div>\n}\n\nexport default TurtleGame"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,SAASC,WAAW,QAAQ,qBAAqB;AACjD,SAASC,MAAM,QAAQ,UAAU;AACjC,OAAOC,MAAM,MAAM,aAAa;AAAC;AAEjC,MAAMC,UAAU,GAAGC,KAAK,IAAI;EAAA;EAExB;EACA,MAAM;IAACC,CAAC;IAAEC,CAAC;IAAEC,KAAK;IAAEC,OAAO;IAAEC,QAAQ;IAAEC;EAAS,CAAC,GAAGT,MAAM,EAAE;;EAE5D;EACA,MAAMU,KAAK,GAAG,GAAG;EACjB,MAAMC,MAAM,GAAG,GAAG;;EAElB;EACA,MAAMC,SAAS,GAAGf,MAAM,CAAC,IAAI,CAAC;;EAE9B;EACA,MAAMgB,IAAI,GAAG,CAACC,GAAG,EAAEC,UAAU,KAAK;IAC9BC,OAAO,CAACC,GAAG,CAACF,UAAU,CAAC;IACvBG,QAAQ,CAACJ,GAAG,EAAEC,UAAU,CAAC;EAC7B,CAAC;EAEDjB,SAAS,CAAC,MAAM;IACZ;IACA,MAAMqB,MAAM,GAAGP,SAAS,CAACQ,OAAO;IAChC,MAAMC,OAAO,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACvC,IAAIP,UAAU,GAAG,CAAC;IAClB,IAAIQ,gBAAgB;;IAEpB;IACA,MAAMC,MAAM,GAAG,MAAM;MACjBT,UAAU,EAAE;MACZF,IAAI,CAACQ,OAAO,EAAEN,UAAU,CAAC;MACzBQ,gBAAgB,GAAGE,MAAM,CAACC,qBAAqB,CAACF,MAAM,CAAC;IAC3D,CAAC;IACDA,MAAM,EAAE;IAER,OAAO,MAAM;MACTC,MAAM,CAACE,oBAAoB,CAACJ,gBAAgB,CAAC;IACjD,CAAC;EACL,CAAC,EAAE,CAACV,IAAI,CAAC,CAAC,EAAC;;EAEX,SAASK,QAAQ,CAACJ,GAAG,EAAEc,MAAM,EAAE;IAC3B,IAAIC,EAAE,GAAGzB,CAAC;MACN0B,EAAE,GAAGzB,CAAC;IACV,MAAM0B,cAAc,GAAIzB,KAAK,GAAG0B,IAAI,CAACC,EAAE,GAAI,GAAG;IAC9C,IAAIC,EAAE,GAAG9B,CAAC,GAAGwB,MAAM,GAAGI,IAAI,CAACG,GAAG,CAACJ,cAAc,CAAC;IAC9C,IAAIK,EAAE,GAAG/B,CAAC,GAAGuB,MAAM,GAAGI,IAAI,CAACK,GAAG,CAACN,cAAc,CAAC;IAC9CjB,GAAG,CAACwB,SAAS,EAAE;IACfxB,GAAG,CAACL,SAAS,GAAGA,SAAS;IACzBK,GAAG,CAACyB,WAAW,GAAG/B,QAAQ;IAC1BM,GAAG,CAAC0B,MAAM,CAACX,EAAE,EAAEC,EAAE,CAAC;IAClBhB,GAAG,CAAC2B,MAAM,CAACP,EAAE,EAAEE,EAAE,CAAC;IAClBtB,GAAG,CAAC4B,MAAM,EAAE;EAChB;EAAC;EAED,oBAAO;IAAK,KAAK,EAAE;MAAC,GAAGzC,MAAM,CAAC0C,aAAa;MAAEjC,KAAK,EAAEA,KAAK,GAAG,CAAC;MAAEC,MAAM,EAAEA,MAAM,GAAG;IAAE,CAAE;IAAA,wBAChF;MACI,KAAK,EAAE;QACH,GAAGV,MAAM,CAAC2C,MAAM;QAChBC,IAAI,EAAEzC,CAAC;QACP0C,GAAG,EAAEzC,CAAC;QACN0C,SAAS,EAAG,UAASzC,KAAM;MAC/B;IAAE;MAAA;MAAA;MAAA;IAAA,QACJ,eACF;MAAQ,GAAG,EAAEM,SAAU;MAAA,GAAKT;IAAK;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QAClC;AACV,CAAC;AAAA,GA/DKD,UAAU;AAAA,KAAVA,UAAU;AAiEhB,eAAeA,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}