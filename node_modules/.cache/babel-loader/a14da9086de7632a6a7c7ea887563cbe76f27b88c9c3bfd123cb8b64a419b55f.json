{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst turtle = {\n  x: 360,\n  y: 200,\n  angle: 0,\n  penDown: true,\n  penColor: '#000000',\n  lineWidth: 2\n};\nexport const Turtle = props => {\n  _s();\n  // turtle position\n  const [x, setX] = useState(turtle.x);\n  const [y, setY] = useState(turtle.y);\n  const [angle, setAngle] = useState(turtle.angle);\n\n  // grab deconstructed list of actions from keyboard listener\n  const {\n    moveForward,\n    turnLeft,\n    turnRight,\n    penIsDown,\n    drawingStar\n  } = useKeyboard();\n  function updateRotation() {\n    // if turning, update the turtle's angle\n    const rotationSpeed = 0.05;\n    let updatedAngle = turtle.angle - (turnLeft ? rotationSpeed : 0) + (turnRight ? rotationSpeed : 0);\n    // want to restrict angle between 0 and 360 \n    while (updatedAngle > 360) {\n      updatedAngle -= 360;\n    }\n    while (updatedAngle < 0) {\n      updatedAngle += 360;\n    }\n    turtle.angle = updatedAngle;\n  }\n  function updatePosition() {\n    // if moving forward, update the turtle's position based on it's local forward direction\n    const movementSpeed = 0.01;\n    // this is really movement distance, the speed is dependent on how fast each frame renders\n    // so it is likely the case that when drawing, the turtle moves slower (rendering takes more processing)\n    // this is not the best way to do it, but for time's sake i will leave it like this\n    // improvement here would be separating the thread for movement and rendering\n    let updatedPositionX = Math.cos(turtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + turtle.x;\n    let updatedPositionY = Math.sin(turtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + turtle.y;\n    if (moveForward) {\n      // if drawing, draw! don't want to be drawing pen and star at same time, so prioritize penIsDown\n      if (penIsDown) {\n        turtle.forward(movementSpeed);\n      } else if (drawingStar) {\n        turtle.drawStar();\n      }\n\n      // keeps the turtle within the bounds of the canvas, I set this edgeGap arbitrarily\n      // it's a bit finniky because the turtle's position is not the center of the triangle\n      // improvement here would involve re-aligning the center of turtle\n      const edgeGap = 8;\n      if (updatedPositionX > width - edgeGap) {\n        updatedPositionX = edgeGap;\n      } else if (updatedPositionX < edgeGap) {\n        updatedPositionX = width - edgeGap;\n      }\n      if (updatedPositionY > height - edgeGap) {\n        updatedPositionY = edgeGap;\n      } else if (updatedPositionY < edgeGap) {\n        updatedPositionY = height - edgeGap;\n      }\n      turtle.x = updatedPositionX;\n      turtle.y = updatedPositionY;\n    } else if (drawingStar) {\n      turtle.drawStar();\n    }\n  }\n\n  // update state\n  setInterval(() => {\n    setX(turtle.x);\n    setY(turtle.y);\n    setAngle(turtle.angle);\n  }, 50);\n  useEffect(() => {\n    updatePosition();\n  }, [moveForward]);\n  useEffect(() => {\n    updateRotation();\n  }, [turnLeft, turnRight]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(Turtle, \"rMfE2vJRw+gNiSM0UJdp7Q4sjPo=\", true);\n_c = Turtle;\nvar _c;\n$RefreshReg$(_c, \"Turtle\");","map":{"version":3,"names":["React","useRef","useEffect","turtle","x","y","angle","penDown","penColor","lineWidth","Turtle","props","setX","useState","setY","setAngle","moveForward","turnLeft","turnRight","penIsDown","drawingStar","useKeyboard","updateRotation","rotationSpeed","updatedAngle","updatePosition","movementSpeed","updatedPositionX","Math","cos","PI","updatedPositionY","sin","forward","drawStar","edgeGap","width","height","setInterval"],"sources":["/Users/ericbollar/Desktop/BollarQuickenProject/src/Turtle.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react'\n\nconst turtle = {\n    x: 360,\n    y: 200,\n    angle: 0,\n    penDown: true,\n    penColor: '#000000',\n    lineWidth: 2\n};\n\nexport const Turtle = props => {\n\n    // turtle position\n    const [x, setX] = useState(turtle.x);\n    const [y, setY] = useState(turtle.y);\n    const [angle, setAngle] = useState(turtle.angle);\n\n    // grab deconstructed list of actions from keyboard listener\n    const {moveForward, turnLeft, turnRight, penIsDown, drawingStar} = useKeyboard();\n\n    function updateRotation() {\n        // if turning, update the turtle's angle\n        const rotationSpeed = 0.05;\n        let updatedAngle = turtle.angle - (turnLeft ? rotationSpeed : 0) + (turnRight ? rotationSpeed : 0);\n        // want to restrict angle between 0 and 360 \n        while (updatedAngle > 360) {\n            updatedAngle -= 360;\n        }\n        while (updatedAngle < 0) {\n            updatedAngle += 360\n        }\n        turtle.angle = updatedAngle;\n    }\n\n    function updatePosition() {\n        // if moving forward, update the turtle's position based on it's local forward direction\n        const movementSpeed = 0.01; \n            // this is really movement distance, the speed is dependent on how fast each frame renders\n            // so it is likely the case that when drawing, the turtle moves slower (rendering takes more processing)\n            // this is not the best way to do it, but for time's sake i will leave it like this\n            // improvement here would be separating the thread for movement and rendering\n        let updatedPositionX = Math.cos(turtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + turtle.x;\n        let updatedPositionY = Math.sin(turtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + turtle.y;\n        if (moveForward) {\n            // if drawing, draw! don't want to be drawing pen and star at same time, so prioritize penIsDown\n            if (penIsDown) {\n                turtle.forward(movementSpeed);\n            } else if (drawingStar) {\n                turtle.drawStar();\n            }\n\n            // keeps the turtle within the bounds of the canvas, I set this edgeGap arbitrarily\n            // it's a bit finniky because the turtle's position is not the center of the triangle\n            // improvement here would involve re-aligning the center of turtle\n            const edgeGap = 8;\n            if (updatedPositionX > width - edgeGap) {\n                updatedPositionX = edgeGap;\n            } else if (updatedPositionX < edgeGap) {\n                updatedPositionX = width - edgeGap;\n            }\n            if (updatedPositionY > height - edgeGap) {\n                updatedPositionY = edgeGap;\n            } else if (updatedPositionY < edgeGap) {\n                updatedPositionY = height - edgeGap;\n            }\n\n            turtle.x = updatedPositionX;\n            turtle.y = updatedPositionY;\n        } else if (drawingStar) {\n            turtle.drawStar();\n        }\n    }\n\n    // update state\n    setInterval(() => {\n        setX(turtle.x);\n        setY(turtle.y);\n        setAngle(turtle.angle);\n    }, 50);\n\n    useEffect(() => {\n        updatePosition();\n    }, [moveForward])\n\n    useEffect(() => {\n        updateRotation();\n    }, [turnLeft, turnRight])\n\n    return <></>\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}