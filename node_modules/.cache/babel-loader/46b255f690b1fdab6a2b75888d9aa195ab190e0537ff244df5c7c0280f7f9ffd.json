{"ast":null,"code":"var _jsxFileName = \"/Users/ericbollar/Desktop/BollarQuickenProject/src/TurtleGame.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport { useKeyboard } from './hooks/useKeyboard';\nimport { Turtle } from './Turtle';\nimport styles from './styles.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TurtleGame = props => {\n  _s();\n  // grab deconstruct turtle values\n  const t = Turtle();\n\n  // grab deconstructed list of actions from keyboard listener\n  const {\n    moveForward,\n    turnLeft,\n    turnRight,\n    penIsDown,\n    drawingStar\n  } = useKeyboard();\n\n  // dimensions of canvas\n  const width = 800;\n  const height = 480;\n\n  // this allows us to access the graphics context\n  const canvasRef = useRef(null);\n\n  // this is the game loop\n  const draw = (ctx, frameCount) => {\n    drawLine(ctx, frameCount);\n  };\n  const drawLine = (ctx, length) => {\n    const angleInRadians = angle * Math.PI / 180;\n    let x1 = x + length * Math.sin(angleInRadians);\n    let y1 = y + length * Math.cos(angleInRadians);\n    ctx.beginPath();\n    ctx.lineWidth = lineWidth;\n    ctx.strokeStyle = penColor;\n    ctx.moveTo(x, y);\n    ctx.lineTo(0, 0);\n    // ctx.lineTo(x1, y1);\n    ctx.stroke();\n    turtle.updatePosition();\n  };\n  useEffect(() => {\n    // get the graphics context\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    let frameCount = 0;\n    let animationFrameId;\n\n    // draw the current frame\n    const render = () => {\n      frameCount++;\n      draw(context, frameCount);\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n    render();\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [draw]); // called when draw changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      ...styles.canvasWrapper,\n      width: width + 2,\n      height: height + 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        ...styles.turtle,\n        left: t.x,\n        top: t.y,\n        transform: `rotate(${angle}DEG)`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 12\n  }, this);\n};\n_s(TurtleGame, \"V84IAGGIVSqZp0xHVbCROK5ytSw=\", false, function () {\n  return [useKeyboard];\n});\n_c = TurtleGame;\nexport default TurtleGame;\nvar _c;\n$RefreshReg$(_c, \"TurtleGame\");","map":{"version":3,"names":["React","useRef","useEffect","useKeyboard","Turtle","styles","TurtleGame","props","t","moveForward","turnLeft","turnRight","penIsDown","drawingStar","width","height","canvasRef","draw","ctx","frameCount","drawLine","length","angleInRadians","angle","Math","PI","x1","x","sin","y1","y","cos","beginPath","lineWidth","strokeStyle","penColor","moveTo","lineTo","stroke","turtle","updatePosition","canvas","current","context","getContext","animationFrameId","render","window","requestAnimationFrame","cancelAnimationFrame","canvasWrapper","left","top","transform"],"sources":["/Users/ericbollar/Desktop/BollarQuickenProject/src/TurtleGame.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react'\nimport { useKeyboard } from './hooks/useKeyboard';\nimport { Turtle } from './Turtle';\nimport styles from './styles.js';\n\n\nconst TurtleGame = props => {\n\n    // grab deconstruct turtle values\n    const t = Turtle();\n\n    // grab deconstructed list of actions from keyboard listener\n    const {moveForward, turnLeft, turnRight, penIsDown, drawingStar} = useKeyboard();\n\n    // dimensions of canvas\n    const width = 800;\n    const height = 480;\n\n    // this allows us to access the graphics context\n    const canvasRef = useRef(null)\n    \n    // this is the game loop\n    const draw = (ctx, frameCount) => {\n        drawLine(ctx, frameCount);\n    }\n\n    const drawLine = (ctx, length) => {\n        const angleInRadians = (angle * Math.PI) / 180;\n        let x1 = x + length * Math.sin(angleInRadians);\n        let y1 = y + length * Math.cos(angleInRadians);\n        ctx.beginPath();\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = penColor;\n        ctx.moveTo(x, y);\n        ctx.lineTo(0, 0);\n        // ctx.lineTo(x1, y1);\n        ctx.stroke();\n        turtle.updatePosition();\n    }\n    \n    useEffect(() => {\n        // get the graphics context\n        const canvas = canvasRef.current\n        const context = canvas.getContext('2d')\n        let frameCount = 0\n        let animationFrameId\n        \n        // draw the current frame\n        const render = () => {\n            frameCount++\n            draw(context, frameCount)\n            animationFrameId = window.requestAnimationFrame(render)\n        }\n        render()\n        \n        return () => {\n            window.cancelAnimationFrame(animationFrameId)\n        }\n    }, [draw]) // called when draw changes\n    \n    return <div style={{...styles.canvasWrapper, width: width + 2, height: height + 2 }}>\n        <div\n            style={{\n                ...styles.turtle,\n                left: t.x,\n                top: t.y,\n                transform: `rotate(${angle}DEG)`,\n            }}\n        />\n        <canvas ref={canvasRef} {...props}/>\n    </div>\n}\n\nexport default TurtleGame"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}