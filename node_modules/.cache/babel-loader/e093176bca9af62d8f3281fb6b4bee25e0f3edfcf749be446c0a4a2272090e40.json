{"ast":null,"code":"var _jsxFileName = \"/Users/ericbollar/Desktop/BollarQuickenProject/src/components/TurtleGame.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useKeyboard } from '../hooks/useKeyboard';\nimport styles from '../styles.js';\n\n// local turtle attributes used for calculations\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst localTurtle = {\n  x: 360,\n  // coordinates\n  y: 200,\n  angle: 0,\n  // angle in degrees\n  moving: false,\n  // isMovingForward?\n  turningLeft: false,\n  // isTurning?\n  turningRight: false,\n  penDown: false,\n  // isDrawingLine?\n  drawingStar: false,\n  // isDrawingStar?\n  canvasWidth: 0,\n  // canvas dimensions\n  canvasHeight: 0\n};\n\n// TurtleGame class which handles the drawing and calculations of Turtle\n// Improvement here would be separating Canvas and Turtle into two separate\n// classes. It would make the code much cleaner\n\nconst TurtleGame = _ref => {\n  _s();\n  let {\n    width,\n    height\n  } = _ref;\n  // this allows access to the graphics context\n  const canvasRef = useRef(null);\n\n  // stored turtle attributes\n  const [x, setX] = useState(localTurtle.x);\n  const [y, setY] = useState(localTurtle.y);\n  const [angle, setAngle] = useState(localTurtle.angle);\n\n  // grab deconstructed list of actions from keyboard listener\n  const {\n    KeyW,\n    KeyA,\n    KeyD,\n    Space,\n    Digit1\n  } = useKeyboard();\n\n  // update local canvasHeight when props change\n  useEffect(() => {\n    localTurtle.canvasHeight = height;\n  }, [height]);\n\n  // update local canvasWidth when props change\n  useEffect(() => {\n    localTurtle.canvasWidth = width;\n  }, [width]);\n\n  // update moving when KeyW key changes\n  useEffect(() => {\n    localTurtle.moving = KeyW;\n  }, [KeyW]);\n\n  // update turningLeft when KeyA key changes\n  useEffect(() => {\n    localTurtle.turningLeft = KeyA;\n  }, [KeyA]);\n\n  // update turningRight when KeyD key changes\n  useEffect(() => {\n    localTurtle.turningRight = KeyD;\n  }, [KeyD]);\n\n  // update penDown when Space key changes\n  useEffect(() => {\n    localTurtle.penDown = Space;\n  }, [Space]);\n\n  // update drawStar when 1 key changes\n  useEffect(() => {\n    localTurtle.drawingStar = Digit1;\n  }, [Digit1]);\n  function updateRotation() {\n    // if turning, update the turtle's angle\n    // this is really turning distance, the speed is dependent on how fast each frame renders\n    const rotationSpeed = 0.01;\n    let updatedAngle = localTurtle.angle - (localTurtle.turningLeft ? rotationSpeed : 0) + (localTurtle.turningRight ? rotationSpeed : 0);\n\n    // want to restrict angle between 0 and 360 degrees\n    while (updatedAngle > 360) {\n      updatedAngle -= 360;\n    }\n    while (updatedAngle < 0) {\n      updatedAngle += 360;\n    }\n    // update local\n    localTurtle.angle = updatedAngle;\n\n    // call hook\n    setAngle(localTurtle.angle);\n  }\n  function updatePosition() {\n    // if moving forward, update the turtle's position based on it's local forward direction\n    // this is really movement distance (similar to rotation), the speed is dependent on how fast each frame renders\n    // so it is likely the case that when drawing, the turtle moves slower (rendering takes more processing)\n    // this is not the best way to do it, but for time's sake i will leave it like this\n    // improvement here would be separating the thread for movement and rendering\n    const movementSpeed = .005;\n\n    // move the turtle forwards relative to it's direction\n    let updatedPositionX = Math.cos(localTurtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + localTurtle.x;\n    let updatedPositionY = Math.sin(localTurtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + localTurtle.y;\n\n    // keeps the turtle within the bounds of the canvas, I set this edgeGap arbitrarily\n    // it's a bit finniky because the turtle's position is not the center of the triangle\n    // improvement here would involve re-aligning the center of turtle\n    const edgeGap = 5;\n    if (updatedPositionX > localTurtle.canvasWidth - edgeGap) {\n      updatedPositionX = edgeGap;\n    } else if (updatedPositionX < edgeGap) {\n      updatedPositionX = localTurtle.canvasWidth - edgeGap;\n    }\n    if (updatedPositionY > localTurtle.canvasHeight - edgeGap) {\n      updatedPositionY = edgeGap;\n    } else if (updatedPositionY < edgeGap) {\n      updatedPositionY = localTurtle.canvasHeight - edgeGap;\n    }\n\n    // if drawing, draw! can only draw forward if moving\n    if (localTurtle.penDown) {\n      drawForward(movementSpeed);\n    }\n\n    // update position\n    localTurtle.x = updatedPositionX;\n    localTurtle.y = updatedPositionY;\n\n    // call hooks\n    setX(localTurtle.x);\n    setY(localTurtle.y);\n  }\n\n  // game loop\n  setInterval(() => {\n    if (localTurtle.moving) {\n      updatePosition();\n    }\n    updateRotation();\n    if (localTurtle.drawingStar) {\n      drawStar();\n    }\n  }, 50);\n\n  // draws a line of given length from turtle in forward direction\n  function drawForward(length) {\n    // get canvas context\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      return;\n    }\n    ;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n    ;\n\n    // draw the line\n    const angleInRadians = localTurtle.angle * Math.PI / 180;\n    let x1 = localTurtle.x + length * Math.sin(angleInRadians);\n    let y1 = localTurtle.y + length * Math.cos(angleInRadians);\n    ctx.beginPath();\n    ctx.lineWidth = 5;\n    ctx.strokeStyle = '#000000';\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(localTurtle.x, localTurtle.y);\n    ctx.stroke();\n\n    // return the endpoints (helpful in drawStar)\n    // this is a bit hacky and could be cleaned up\n    // improvement would be to separate drawing functions from turtlegame entirely\n    return {\n      x1,\n      y1\n    };\n  }\n\n  // draw a star at turtle's position\n  function drawStar() {\n    var i;\n    for (i = 0; i < 18; i++) {\n      localTurtle.angle += 100;\n\n      // grab endpoints of drawForward and re-assign turtle's position\n      const {\n        x1,\n        y1\n      } = drawForward(80);\n      if (x1 && y1) {\n        localTurtle.x = x1;\n        localTurtle.y = y1;\n      }\n    }\n  }\n  ;\n\n  // clears the canvas and resets turtle position\n  function resetCanvas() {\n    // get canvas context\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      return;\n    }\n    ;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n    ;\n    ctx.clearRect(0, 0, width, height);\n    localTurtle.x = 360;\n    localTurtle.y = 200;\n  }\n\n  // return the canvas element and reset button\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      style: styles.button,\n      onClick: resetCanvas,\n      children: \"Reset Canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        ...styles.canvasWrapper,\n        width: width + 2,\n        height: height + 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          ...styles.turtle,\n          left: x,\n          top: y,\n          transform: `rotate(${angle}DEG)`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        width: width + 2,\n        height: height + 2,\n        ref: canvasRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(TurtleGame, \"Ckpmpbn3r5c/xwWjTqBLhig5dq0=\", false, function () {\n  return [useKeyboard];\n});\n_c = TurtleGame;\nexport default TurtleGame;\nvar _c;\n$RefreshReg$(_c, \"TurtleGame\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useKeyboard","styles","localTurtle","x","y","angle","moving","turningLeft","turningRight","penDown","drawingStar","canvasWidth","canvasHeight","TurtleGame","width","height","canvasRef","setX","setY","setAngle","KeyW","KeyA","KeyD","Space","Digit1","updateRotation","rotationSpeed","updatedAngle","updatePosition","movementSpeed","updatedPositionX","Math","cos","PI","updatedPositionY","sin","edgeGap","drawForward","setInterval","drawStar","length","canvas","current","ctx","getContext","angleInRadians","x1","y1","beginPath","lineWidth","strokeStyle","moveTo","lineTo","stroke","i","resetCanvas","clearRect","button","canvasWrapper","turtle","left","top","transform"],"sources":["/Users/ericbollar/Desktop/BollarQuickenProject/src/components/TurtleGame.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport { useKeyboard } from '../hooks/useKeyboard';\nimport styles from '../styles.js';\n\n// local turtle attributes used for calculations\nconst localTurtle = {\n    x: 360, // coordinates\n    y: 200,\n    angle: 0, // angle in degrees\n    moving: false, // isMovingForward?\n    turningLeft: false, // isTurning?\n    turningRight: false,\n    penDown: false, // isDrawingLine?\n    drawingStar: false, // isDrawingStar?\n    canvasWidth: 0, // canvas dimensions\n    canvasHeight: 0,\n}\n\n// TurtleGame class which handles the drawing and calculations of Turtle\n// Improvement here would be separating Canvas and Turtle into two separate\n// classes. It would make the code much cleaner\n\nconst TurtleGame = ({width, height}) => {\n\n    // this allows access to the graphics context\n    const canvasRef = useRef(null);\n\n    // stored turtle attributes\n    const [x, setX] = useState(localTurtle.x);\n    const [y, setY] = useState(localTurtle.y);\n    const [angle, setAngle] = useState(localTurtle.angle);\n\n    // grab deconstructed list of actions from keyboard listener\n    const {KeyW, KeyA, KeyD, Space, Digit1} = useKeyboard();\n\n    // update local canvasHeight when props change\n    useEffect(() => {\n        localTurtle.canvasHeight = height;\n    }, [height])\n\n    // update local canvasWidth when props change\n    useEffect(() => {\n        localTurtle.canvasWidth = width;\n    }, [width])\n\n    // update moving when KeyW key changes\n    useEffect(() => {\n        localTurtle.moving = KeyW;\n    }, [KeyW])\n\n    // update turningLeft when KeyA key changes\n    useEffect(() => {\n        localTurtle.turningLeft = KeyA;\n    }, [KeyA])\n\n    // update turningRight when KeyD key changes\n    useEffect(() => {\n        localTurtle.turningRight = KeyD;\n    }, [KeyD])\n\n    // update penDown when Space key changes\n    useEffect(() => {\n        localTurtle.penDown = Space;\n    }, [Space])\n\n    // update drawStar when 1 key changes\n    useEffect(() => {\n        localTurtle.drawingStar = Digit1;\n    }, [Digit1])\n\n    function updateRotation() {\n        // if turning, update the turtle's angle\n        // this is really turning distance, the speed is dependent on how fast each frame renders\n        const rotationSpeed = 0.01;\n        let updatedAngle = localTurtle.angle\n            - (localTurtle.turningLeft ? rotationSpeed : 0)\n            + (localTurtle.turningRight ? rotationSpeed : 0);\n\n        // want to restrict angle between 0 and 360 degrees\n        while (updatedAngle > 360) {\n            updatedAngle -= 360;\n        }\n        while (updatedAngle < 0) {\n            updatedAngle += 360\n        }\n        // update local\n        localTurtle.angle = updatedAngle;\n\n        // call hook\n        setAngle(localTurtle.angle);\n    }\n\n    function updatePosition() {\n        // if moving forward, update the turtle's position based on it's local forward direction\n        // this is really movement distance (similar to rotation), the speed is dependent on how fast each frame renders\n        // so it is likely the case that when drawing, the turtle moves slower (rendering takes more processing)\n        // this is not the best way to do it, but for time's sake i will leave it like this\n        // improvement here would be separating the thread for movement and rendering\n        const movementSpeed = .005; \n\n        // move the turtle forwards relative to it's direction\n        let updatedPositionX = Math.cos(localTurtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + localTurtle.x;\n        let updatedPositionY = Math.sin(localTurtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + localTurtle.y;\n\n        // keeps the turtle within the bounds of the canvas, I set this edgeGap arbitrarily\n        // it's a bit finniky because the turtle's position is not the center of the triangle\n        // improvement here would involve re-aligning the center of turtle\n        const edgeGap = 5;\n        if (updatedPositionX > localTurtle.canvasWidth - edgeGap) {\n            updatedPositionX = edgeGap;\n        } else if (updatedPositionX < edgeGap) {\n            updatedPositionX = localTurtle.canvasWidth - edgeGap;\n        }\n        if (updatedPositionY > localTurtle.canvasHeight - edgeGap) {\n            updatedPositionY = edgeGap;\n        } else if (updatedPositionY < edgeGap) {\n            updatedPositionY = localTurtle.canvasHeight - edgeGap;\n        }\n        \n        // if drawing, draw! can only draw forward if moving\n        if (localTurtle.penDown) {\n            drawForward(movementSpeed);\n        }\n\n        // update position\n        localTurtle.x = updatedPositionX;\n        localTurtle.y = updatedPositionY;\n\n        // call hooks\n        setX(localTurtle.x);\n        setY(localTurtle.y);\n    }\n\n    // game loop\n    setInterval(() => {\n        if (localTurtle.moving) {\n            updatePosition();\n        }\n        updateRotation();\n\n        if (localTurtle.drawingStar) {\n            drawStar();\n        }\n    }, 50);\n\n    // draws a line of given length from turtle in forward direction\n    function drawForward(length) {\n        // get canvas context\n        const canvas = canvasRef.current;\n        if (!canvas) { return };\n        const ctx = canvas.getContext('2d');\n        if (!ctx) { return };\n\n        // draw the line\n        const angleInRadians = (localTurtle.angle * Math.PI) / 180;\n        let x1 = localTurtle.x + length * Math.sin(angleInRadians);\n        let y1 = localTurtle.y + length * Math.cos(angleInRadians);\n        ctx.beginPath();\n        ctx.lineWidth = 5;\n        ctx.strokeStyle = '#000000';\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(localTurtle.x, localTurtle.y);\n        ctx.stroke();\n\n        // return the endpoints (helpful in drawStar)\n        // this is a bit hacky and could be cleaned up\n        // improvement would be to separate drawing functions from turtlegame entirely\n        return {x1, y1};\n    }\n\n    // draw a star at turtle's position\n    function drawStar() {\n        var i;\n        for (i = 0; i < 18; i++) {\n            localTurtle.angle += 100;\n\n            // grab endpoints of drawForward and re-assign turtle's position\n            const {x1, y1} = drawForward(80);\n            if (x1 && y1) {\n                localTurtle.x = x1;\n                localTurtle.y = y1;\n            }\n        }\n    };\n\n    // clears the canvas and resets turtle position\n    function resetCanvas() {\n        // get canvas context\n        const canvas = canvasRef.current;\n        if (!canvas) { return };\n        const ctx = canvas.getContext('2d');\n        if (!ctx) { return };\n\n        ctx.clearRect(0, 0, width, height);\n\n        localTurtle.x = 360;\n        localTurtle.y = 200;\n    }\n    \n    // return the canvas element and reset button\n    return <>\n        <button style={styles.button} onClick={resetCanvas}>\n            Reset Canvas\n        </button>\n            \n        <div style={{...styles.canvasWrapper, width: width + 2, height: height + 2 }}>\n            <div\n                style={{\n                    ...styles.turtle,\n                    left: x,\n                    top: y,\n                    transform: `rotate(${angle}DEG)`,\n                }}\n            />\n            <canvas width={width + 2} height={height+2}  ref={canvasRef}/>\n        </div>\n    </>\n}\n\nexport default TurtleGame;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}