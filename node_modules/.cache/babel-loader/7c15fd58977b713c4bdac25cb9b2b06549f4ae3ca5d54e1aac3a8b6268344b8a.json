{"ast":null,"code":"var _jsxFileName = \"/Users/ericbollar/Desktop/BollarQuickenProject/src/TurtleGame.js\",\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useKeyboard } from './hooks/useKeyboard';\nimport styles from './styles.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst localTurtle = {\n  x: 360,\n  y: 200,\n  angle: 0\n};\nconst TurtleGame = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  // this allows access to the graphics context\n  const canvasRef = useRef(null);\n\n  // dimensions of canvas\n  const width = 800;\n  const height = 480;\n  const [x, setX] = useState(localTurtle.x);\n  const [y, setY] = useState(localTurtle.y);\n  const [angle, setAngle] = useState(localTurtle.angle);\n\n  // grab deconstructed list of actions from keyboard listener\n  const {\n    moveForward,\n    turnLeft,\n    turnRight,\n    penIsDown,\n    drawingStar\n  } = useKeyboard();\n  _s(useEffect(_s(() => {\n    _s();\n    // grab deconstructed list of actions from keyboard listener\n    console.log(useKeyboard());\n  }, \"LYQzb/HmYW9zxx9bRiBNGUQR3Gw=\", false, function () {\n    return [useKeyboard];\n  }), useKeyboard()), \"LYQzb/HmYW9zxx9bRiBNGUQR3Gw=\", false, function () {\n    return [useKeyboard];\n  });\n  function updateRotation() {\n    // if turning, update the turtle's angle\n    const rotationSpeed = 0.05;\n    let updatedAngle = localTurtle.angle - (turnLeft ? rotationSpeed : 0) + (turnRight ? rotationSpeed : 0);\n    // want to restrict angle between 0 and 360 \n    while (updatedAngle > 360) {\n      updatedAngle -= 360;\n    }\n    while (updatedAngle < 0) {\n      updatedAngle += 360;\n    }\n    localTurtle.angle = updatedAngle;\n    setAngle(localTurtle.angle);\n  }\n  function updatePosition() {\n    // if moving forward, update the turtle's position based on it's local forward direction\n    const movementSpeed = .01;\n    // this is really movement distance, the speed is dependent on how fast each frame renders\n    // so it is likely the case that when drawing, the turtle moves slower (rendering takes more processing)\n    // this is not the best way to do it, but for time's sake i will leave it like this\n    // improvement here would be separating the thread for movement and rendering\n    let updatedPositionX = Math.cos(localTurtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + localTurtle.x;\n    let updatedPositionY = Math.sin(localTurtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + localTurtle.y;\n    if (moveForward) {\n      // if drawing, draw! don't want to be drawing pen and star at same time, so prioritize penIsDown\n      // if (penIsDown) {\n      //     //turtle.forward(movementSpeed);\n      // } else if (drawingStar) {\n      //     //turtle.drawStar();\n      // }\n\n      // keeps the turtle within the bounds of the canvas, I set this edgeGap arbitrarily\n      // it's a bit finniky because the turtle's position is not the center of the triangle\n      // improvement here would involve re-aligning the center of turtle\n      const edgeGap = 8;\n      if (updatedPositionX > width - edgeGap) {\n        updatedPositionX = edgeGap;\n      } else if (updatedPositionX < edgeGap) {\n        updatedPositionX = width - edgeGap;\n      }\n      if (updatedPositionY > height - edgeGap) {\n        updatedPositionY = edgeGap;\n      } else if (updatedPositionY < edgeGap) {\n        updatedPositionY = height - edgeGap;\n      }\n      localTurtle.x = updatedPositionX;\n      localTurtle.y = updatedPositionY;\n      // } else if (drawingStar) {\n      //     //turtle.drawStar();\n      // }\n    }\n\n    setX(localTurtle.x);\n    setY(localTurtle.y);\n  }\n  setInterval(() => {\n    updatePosition();\n    updateRotation();\n  }, 50);\n  function drawLine(length, x0, y0, angle, lineWidth, penColor) {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const angleInRadians = angle * Math.PI / 180;\n    let x1 = x0 + length * Math.sin(angleInRadians);\n    let y1 = y0 + length * Math.cos(angleInRadians);\n    ctx.beginPath();\n    ctx.lineWidth = lineWidth;\n    ctx.strokeStyle = penColor;\n    ctx.moveTo(x0, y0);\n    ctx.lineTo(0, 0);\n    // ctx.lineTo(x1, y1);\n    ctx.stroke();\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      ...styles.canvasWrapper,\n      width: width + 2,\n      height: height + 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        ...styles.turtle,\n        left: localTurtle.x,\n        top: localTurtle.y,\n        transform: `rotate(${localTurtle.angle}DEG)`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 12\n  }, this);\n};\n_s2(TurtleGame, \"JGNlo/KWaqfPs0y/LnbQoAmmkbI=\", false, function () {\n  return [useKeyboard, useKeyboard];\n});\n_c = TurtleGame;\nexport default TurtleGame;\nvar _c;\n$RefreshReg$(_c, \"TurtleGame\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useKeyboard","styles","localTurtle","x","y","angle","TurtleGame","canvasRef","width","height","setX","setY","setAngle","moveForward","turnLeft","turnRight","penIsDown","drawingStar","console","log","updateRotation","rotationSpeed","updatedAngle","updatePosition","movementSpeed","updatedPositionX","Math","cos","PI","updatedPositionY","sin","edgeGap","setInterval","drawLine","length","x0","y0","lineWidth","penColor","canvas","current","ctx","getContext","angleInRadians","x1","y1","beginPath","strokeStyle","moveTo","lineTo","stroke","canvasWrapper","turtle","left","top","transform"],"sources":["/Users/ericbollar/Desktop/BollarQuickenProject/src/TurtleGame.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport { useKeyboard } from './hooks/useKeyboard';\nimport styles from './styles.js';\n\nconst localTurtle = {\n    x: 360,\n    y: 200,\n    angle: 0\n}\n\nconst TurtleGame = () => {\n\n    // this allows access to the graphics context\n    const canvasRef = useRef(null)\n\n    // dimensions of canvas\n    const width = 800;\n    const height = 480;\n\n    const [x, setX] = useState(localTurtle.x);\n    const [y, setY] = useState(localTurtle.y);\n    const [angle, setAngle] = useState(localTurtle.angle);\n\n    // grab deconstructed list of actions from keyboard listener\n    const {moveForward, turnLeft, turnRight, penIsDown, drawingStar} = useKeyboard();\n\n    useEffect(() => {\n        // grab deconstructed list of actions from keyboard listener\n        console.log(useKeyboard());\n    }, useKeyboard());\n\n    function updateRotation() {\n        // if turning, update the turtle's angle\n        const rotationSpeed = 0.05;\n        let updatedAngle = localTurtle.angle - (turnLeft ? rotationSpeed : 0) + (turnRight ? rotationSpeed : 0);\n        // want to restrict angle between 0 and 360 \n        while (updatedAngle > 360) {\n            updatedAngle -= 360;\n        }\n        while (updatedAngle < 0) {\n            updatedAngle += 360\n        }\n        localTurtle.angle = updatedAngle;\n\n        setAngle(localTurtle.angle);\n    }\n\n    function updatePosition() {\n        // if moving forward, update the turtle's position based on it's local forward direction\n        const movementSpeed = .01; \n            // this is really movement distance, the speed is dependent on how fast each frame renders\n            // so it is likely the case that when drawing, the turtle moves slower (rendering takes more processing)\n            // this is not the best way to do it, but for time's sake i will leave it like this\n            // improvement here would be separating the thread for movement and rendering\n        let updatedPositionX = Math.cos(localTurtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + localTurtle.x;\n        let updatedPositionY = Math.sin(localTurtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + localTurtle.y;\n        if (moveForward) {\n            // if drawing, draw! don't want to be drawing pen and star at same time, so prioritize penIsDown\n            // if (penIsDown) {\n            //     //turtle.forward(movementSpeed);\n            // } else if (drawingStar) {\n            //     //turtle.drawStar();\n            // }\n    \n            // keeps the turtle within the bounds of the canvas, I set this edgeGap arbitrarily\n            // it's a bit finniky because the turtle's position is not the center of the triangle\n            // improvement here would involve re-aligning the center of turtle\n            const edgeGap = 8;\n            if (updatedPositionX > width - edgeGap) {\n                updatedPositionX = edgeGap;\n            } else if (updatedPositionX < edgeGap) {\n                updatedPositionX = width - edgeGap;\n            }\n            if (updatedPositionY > height - edgeGap) {\n                updatedPositionY = edgeGap;\n            } else if (updatedPositionY < edgeGap) {\n                updatedPositionY = height - edgeGap;\n            }\n    \n            localTurtle.x = updatedPositionX;\n            localTurtle.y = updatedPositionY;\n        // } else if (drawingStar) {\n        //     //turtle.drawStar();\n        // }\n        }\n\n        setX(localTurtle.x);\n        setY(localTurtle.y);\n    }\n\n    setInterval(() => {\n        updatePosition();\n        updateRotation();\n    }, 50);\n\n    function drawLine(length, x0, y0, angle, lineWidth, penColor) {\n        const canvas = canvasRef.current\n        const ctx = canvas.getContext('2d')\n\n        const angleInRadians = (angle * Math.PI) / 180;\n        let x1 = x0 + length * Math.sin(angleInRadians);\n        let y1 = y0 + length * Math.cos(angleInRadians);\n        ctx.beginPath();\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = penColor;\n        ctx.moveTo(x0, y0);\n        ctx.lineTo(0, 0);\n        // ctx.lineTo(x1, y1);\n        ctx.stroke();\n    }\n    \n    return <div style={{...styles.canvasWrapper, width: width + 2, height: height + 2 }}>\n        <div\n            style={{\n                ...styles.turtle,\n                left: localTurtle.x,\n                top: localTurtle.y,\n                transform: `rotate(${localTurtle.angle}DEG)`,\n            }}\n        />\n        <canvas ref={canvasRef}/>\n    </div>\n}\n\nexport default TurtleGame;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}