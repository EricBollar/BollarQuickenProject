{"ast":null,"code":"var _jsxFileName = \"/Users/ericbollar/Desktop/BollarQuickenProject/src/TurtleGame.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useKeyboard } from './hooks/useKeyboard';\nimport styles from './styles.js';\n\n// local turtle attributes used for calculations\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst localTurtle = {\n  x: 360,\n  y: 200,\n  angle: 0,\n  moving: false,\n  turningLeft: false,\n  turningRight: false,\n  penDown: false,\n  drawStar: false\n};\nconst TurtleGame = () => {\n  _s();\n  // this allows access to the graphics context\n  const canvasRef = useRef(null);\n\n  // dimensions of canvas\n  const width = 800;\n  const height = 480;\n\n  // stored turtle attributes\n  const [x, setX] = useState(localTurtle.x);\n  const [y, setY] = useState(localTurtle.y);\n  const [angle, setAngle] = useState(localTurtle.angle);\n  const [moving, setMoving] = useState(localTurtle.moving);\n  const [turningLeft, setTurningLeft] = useState(localTurtle.turningLeft);\n  const [turningRight, setTurningRight] = useState(localTurtle.turningRight);\n  const [penDown, setPenDown] = useState(localTurtle.penDown);\n  const [drawStar, setDrawingStar] = useState(localTurtle.drawingStar);\n\n  // grab deconstructed list of actions from keyboard listener\n  const {\n    KeyW,\n    KeyA,\n    KeyD,\n    Space,\n    Digit1\n  } = useKeyboard();\n\n  // update moving when KeyW key changes\n  useEffect(() => {\n    localTurtle.moving = KeyW;\n  }, [KeyW]);\n\n  // update turningLeft when KeyA key changes\n  useEffect(() => {\n    localTurtle.turningLeft = KeyA;\n  }, [KeyA]);\n\n  // update turningRight when KeyD key changes\n  useEffect(() => {\n    localTurtle.turningRight = KeyD;\n  }, [KeyD]);\n\n  // update penDown when Space key changes\n  useEffect(() => {\n    localTurtle.penDown = Space;\n  }, [Space]);\n\n  // update drawStar when 1 key changes\n  useEffect(() => {\n    localTurtle.drawStar = Digit1;\n  }, [Digit1]);\n  function updateRotation() {\n    // if turning, update the turtle's angle\n    const rotationSpeed = 0.01;\n    let updatedAngle = localTurtle.angle - (localTurtle.turningLeft ? rotationSpeed : 0) + (localTurtle.turningRight ? rotationSpeed : 0);\n    // want to restrict angle between 0 and 360 \n    while (updatedAngle > 360) {\n      updatedAngle -= 360;\n    }\n    while (updatedAngle < 0) {\n      updatedAngle += 360;\n    }\n    localTurtle.angle = updatedAngle;\n    setAngle(localTurtle.angle);\n    setTurningLeft(localTurtle.turningLeft);\n    setTurningRight(localTurtle.turningRight);\n  }\n  function updatePosition() {\n    // if moving forward, update the turtle's position based on it's local forward direction\n    const movementSpeed = .005;\n    // this is really movement distance, the speed is dependent on how fast each frame renders\n    // so it is likely the case that when drawing, the turtle moves slower (rendering takes more processing)\n    // this is not the best way to do it, but for time's sake i will leave it like this\n    // improvement here would be separating the thread for movement and rendering\n    let updatedPositionX = Math.cos(localTurtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + localTurtle.x;\n    let updatedPositionY = Math.sin(localTurtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + localTurtle.y;\n    if (localTurtle.moving) {\n      // if drawing, draw! don't want to be drawing pen and star at same time, so prioritize penIsDown\n      if (localTurtle.penDown) {\n        drawLine(movementSpeed);\n        //turtle.forward(movementSpeed);\n      } else if (localTurtle.drawStar) {\n        drawStarF();\n      }\n\n      // keeps the turtle within the bounds of the canvas, I set this edgeGap arbitrarily\n      // it's a bit finniky because the turtle's position is not the center of the triangle\n      // improvement here would involve re-aligning the center of turtle\n      const edgeGap = 8;\n      if (updatedPositionX > width - edgeGap) {\n        updatedPositionX = edgeGap;\n      } else if (updatedPositionX < edgeGap) {\n        updatedPositionX = width - edgeGap;\n      }\n      if (updatedPositionY > height - edgeGap) {\n        updatedPositionY = edgeGap;\n      } else if (updatedPositionY < edgeGap) {\n        updatedPositionY = height - edgeGap;\n      }\n      localTurtle.x = updatedPositionX;\n      localTurtle.y = updatedPositionY;\n    } else if (localTurtle.drawStar) {\n      drawStarF();\n    }\n    setX(localTurtle.x);\n    setY(localTurtle.y);\n    setMoving(localTurtle.moving);\n  }\n  setInterval(() => {\n    updatePosition();\n    updateRotation();\n  }, 50);\n  function drawLine(length) {\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      return;\n    }\n    ;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n    ;\n    const angleInRadians = localTurtle.angle * Math.PI / 180;\n    let x1 = localTurtle.x + length * Math.sin(angleInRadians);\n    let y1 = localTurtle.y + length * Math.cos(angleInRadians);\n    ctx.beginPath();\n    ctx.lineWidth = 3;\n    ctx.strokeStyle = '#000000';\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(localTurtle.x, localTurtle.y);\n    ctx.stroke();\n  }\n  function drawStarF() {\n    var i;\n    for (i = 0; i < 18; i++) {\n      localTurtle.angle += 100;\n      drawLine(80);\n    }\n  }\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      ...styles.canvasWrapper,\n      width: width + 2,\n      height: height + 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        ...styles.turtle,\n        left: localTurtle.x,\n        top: localTurtle.y,\n        transform: `rotate(${localTurtle.angle}DEG)`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      width: width + 2,\n      height: height + 2,\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 12\n  }, this);\n};\n_s(TurtleGame, \"ZtgvIVVYmK6SQCBucY1993wzyDY=\", false, function () {\n  return [useKeyboard];\n});\n_c = TurtleGame;\nexport default TurtleGame;\nvar _c;\n$RefreshReg$(_c, \"TurtleGame\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useKeyboard","styles","localTurtle","x","y","angle","moving","turningLeft","turningRight","penDown","drawStar","TurtleGame","canvasRef","width","height","setX","setY","setAngle","setMoving","setTurningLeft","setTurningRight","setPenDown","setDrawingStar","drawingStar","KeyW","KeyA","KeyD","Space","Digit1","updateRotation","rotationSpeed","updatedAngle","updatePosition","movementSpeed","updatedPositionX","Math","cos","PI","updatedPositionY","sin","drawLine","drawStarF","edgeGap","setInterval","length","canvas","current","ctx","getContext","angleInRadians","x1","y1","beginPath","lineWidth","strokeStyle","moveTo","lineTo","stroke","i","canvasWrapper","turtle","left","top","transform"],"sources":["/Users/ericbollar/Desktop/BollarQuickenProject/src/TurtleGame.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport { useKeyboard } from './hooks/useKeyboard';\nimport styles from './styles.js';\n\n// local turtle attributes used for calculations\nconst localTurtle = {\n    x: 360,\n    y: 200,\n    angle: 0,\n    moving: false,\n    turningLeft: false,\n    turningRight: false,\n    penDown: false,\n    drawStar: false,\n}\n\nconst TurtleGame = () => {\n\n    // this allows access to the graphics context\n    const canvasRef = useRef(null);\n\n    // dimensions of canvas\n    const width = 800;\n    const height = 480;\n\n    // stored turtle attributes\n    const [x, setX] = useState(localTurtle.x);\n    const [y, setY] = useState(localTurtle.y);\n    const [angle, setAngle] = useState(localTurtle.angle);\n    const [moving, setMoving] = useState(localTurtle.moving);\n    const [turningLeft, setTurningLeft] = useState(localTurtle.turningLeft);\n    const [turningRight, setTurningRight] = useState(localTurtle.turningRight);\n    const [penDown, setPenDown] = useState(localTurtle.penDown);\n    const [drawStar, setDrawingStar] = useState(localTurtle.drawingStar);\n\n    // grab deconstructed list of actions from keyboard listener\n    const {KeyW, KeyA, KeyD, Space, Digit1} = useKeyboard();\n\n    // update moving when KeyW key changes\n    useEffect(() => {\n        localTurtle.moving = KeyW;\n    }, [KeyW])\n\n    // update turningLeft when KeyA key changes\n    useEffect(() => {\n        localTurtle.turningLeft = KeyA;\n    }, [KeyA])\n\n    // update turningRight when KeyD key changes\n    useEffect(() => {\n        localTurtle.turningRight = KeyD;\n    }, [KeyD])\n\n    // update penDown when Space key changes\n    useEffect(() => {\n        localTurtle.penDown = Space;\n    }, [Space])\n\n    // update drawStar when 1 key changes\n    useEffect(() => {\n        localTurtle.drawStar = Digit1;\n    }, [Digit1])\n\n    function updateRotation() {\n        // if turning, update the turtle's angle\n        const rotationSpeed = 0.01;\n        let updatedAngle = localTurtle.angle\n            - (localTurtle.turningLeft ? rotationSpeed : 0)\n            + (localTurtle.turningRight ? rotationSpeed : 0);\n        // want to restrict angle between 0 and 360 \n        while (updatedAngle > 360) {\n            updatedAngle -= 360;\n        }\n        while (updatedAngle < 0) {\n            updatedAngle += 360\n        }\n        localTurtle.angle = updatedAngle;\n\n        setAngle(localTurtle.angle);\n        setTurningLeft(localTurtle.turningLeft);\n        setTurningRight(localTurtle.turningRight);\n    }\n\n    function updatePosition() {\n        // if moving forward, update the turtle's position based on it's local forward direction\n        const movementSpeed = .005; \n            // this is really movement distance, the speed is dependent on how fast each frame renders\n            // so it is likely the case that when drawing, the turtle moves slower (rendering takes more processing)\n            // this is not the best way to do it, but for time's sake i will leave it like this\n            // improvement here would be separating the thread for movement and rendering\n        let updatedPositionX = Math.cos(localTurtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + localTurtle.x;\n        let updatedPositionY = Math.sin(localTurtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + localTurtle.y;\n        if (localTurtle.moving) {\n            // if drawing, draw! don't want to be drawing pen and star at same time, so prioritize penIsDown\n            if (localTurtle.penDown) {\n                drawLine(movementSpeed);\n                //turtle.forward(movementSpeed);\n            } else if (localTurtle.drawStar) {\n                drawStarF();\n            }\n    \n            // keeps the turtle within the bounds of the canvas, I set this edgeGap arbitrarily\n            // it's a bit finniky because the turtle's position is not the center of the triangle\n            // improvement here would involve re-aligning the center of turtle\n            const edgeGap = 8;\n            if (updatedPositionX > width - edgeGap) {\n                updatedPositionX = edgeGap;\n            } else if (updatedPositionX < edgeGap) {\n                updatedPositionX = width - edgeGap;\n            }\n            if (updatedPositionY > height - edgeGap) {\n                updatedPositionY = edgeGap;\n            } else if (updatedPositionY < edgeGap) {\n                updatedPositionY = height - edgeGap;\n            }\n    \n            localTurtle.x = updatedPositionX;\n            localTurtle.y = updatedPositionY;\n        } else if (localTurtle.drawStar) {\n            drawStarF();\n        }\n\n        setX(localTurtle.x);\n        setY(localTurtle.y);\n        setMoving(localTurtle.moving);\n    }\n\n    setInterval(() => {\n        updatePosition();\n        updateRotation();\n    }, 50);\n\n    function drawLine(length) {\n        const canvas = canvasRef.current;\n        if (!canvas) { return };\n        const ctx = canvas.getContext('2d');\n        if (!ctx) { return };\n\n        const angleInRadians = (localTurtle.angle * Math.PI) / 180;\n        let x1 = localTurtle.x + length * Math.sin(angleInRadians);\n        let y1 = localTurtle.y + length * Math.cos(angleInRadians);\n        ctx.beginPath();\n        ctx.lineWidth = 3;\n        ctx.strokeStyle = '#000000';\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(localTurtle.x, localTurtle.y);\n        ctx.stroke();\n    }\n\n    function drawStarF() {\n        var i;\n        for (i = 0; i < 18; i++) {\n            localTurtle.angle += 100;\n            drawLine(80);\n        }\n    };\n    \n    return <div style={{...styles.canvasWrapper, width: width + 2, height: height + 2 }}>\n        <div\n            style={{\n                ...styles.turtle,\n                left: localTurtle.x,\n                top: localTurtle.y,\n                transform: `rotate(${localTurtle.angle}DEG)`,\n            }}\n        />\n        <canvas width={width + 2} height={height+2}  ref={canvasRef}/>\n    </div>\n}\n\nexport default TurtleGame;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}