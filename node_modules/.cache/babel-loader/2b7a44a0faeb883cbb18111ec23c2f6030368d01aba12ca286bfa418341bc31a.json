{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useKeyboard } from './hooks/useKeyboard';\nconst localTurtle = {\n  x: 360,\n  y: 200,\n  angle: 0,\n  penDown: true,\n  penColor: '#000000',\n  lineWidth: 2\n};\nexport const Turtle = () => {\n  _s();\n  const [values, setValues] = useState(localTurtle);\n\n  // dimensions of canvas\n  const width = 800;\n  const height = 480;\n  function updateRotation() {\n    // if turning, update the turtle's angle\n    const rotationSpeed = 0.05;\n    let updatedAngle = localTurtle.angle - (turnLeft ? rotationSpeed : 0) + (turnRight ? rotationSpeed : 0);\n    // want to restrict angle between 0 and 360 \n    while (updatedAngle > 360) {\n      updatedAngle -= 360;\n    }\n    while (updatedAngle < 0) {\n      updatedAngle += 360;\n    }\n    localTurtle.angle = updatedAngle;\n  }\n  const updatePosition = moveForward => {\n    // if moving forward, update the turtle's position based on it's local forward direction\n    const movementSpeed = 0.01;\n    // this is really movement distance, the speed is dependent on how fast each frame renders\n    // so it is likely the case that when drawing, the turtle moves slower (rendering takes more processing)\n    // this is not the best way to do it, but for time's sake i will leave it like this\n    // improvement here would be separating the thread for movement and rendering\n    let updatedPositionX = Math.cos(localTurtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + localTurtle.x;\n    let updatedPositionY = Math.sin(localTurtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + localTurtle.y;\n    if (moveForward) {\n      // if drawing, draw! don't want to be drawing pen and star at same time, so prioritize penIsDown\n      // if (penIsDown) {\n      //     //turtle.forward(movementSpeed);\n      // } else if (drawingStar) {\n      //     //turtle.drawStar();\n      // }\n\n      // keeps the turtle within the bounds of the canvas, I set this edgeGap arbitrarily\n      // it's a bit finniky because the turtle's position is not the center of the triangle\n      // improvement here would involve re-aligning the center of turtle\n      const edgeGap = 8;\n      if (updatedPositionX > width - edgeGap) {\n        updatedPositionX = edgeGap;\n      } else if (updatedPositionX < edgeGap) {\n        updatedPositionX = width - edgeGap;\n      }\n      if (updatedPositionY > height - edgeGap) {\n        updatedPositionY = edgeGap;\n      } else if (updatedPositionY < edgeGap) {\n        updatedPositionY = height - edgeGap;\n      }\n      localTurtle.x = updatedPositionX;\n      localTurtle.y = updatedPositionY;\n      // } else if (drawingStar) {\n      //     //turtle.drawStar();\n      // }\n    }\n  };\n\n  // setInterval(() => {\n  //     setValues({x: localTurtle.x, y: localTurtle.y, angle: localTurtle.angle});\n  // }, 50);\n\n  // useEffect(() => {\n  //     updatePosition();\n  // }, [moveForward])\n\n  // useEffect(() => {\n  //     updateRotation();\n  // }, [turnLeft, turnRight])\n\n  return {\n    values,\n    updatePosition\n  };\n};\n\n// export const Turtle = props => {\n\n//     // turtle position\n//     const [x, setX] = useState(turtle.x);\n//     const [y, setY] = useState(turtle.y);\n//     const [angle, setAngle] = useState(turtle.angle);\n\n//     // update state\n//     setInterval(() => {\n//         setX(turtle.x);\n//         setY(turtle.y);\n//         setAngle(turtle.angle);\n//     }, 50);\n\n//     useEffect(() => {\n//         updatePosition();\n//     }, [moveForward])\n\n//     useEffect(() => {\n//         updateRotation();\n//     }, [turnLeft, turnRight])\n\n//     return <></>\n// }\n_s(Turtle, \"YyrkXZNQnxm6NGhonE890R6nxEA=\");\n_c = Turtle;\nvar _c;\n$RefreshReg$(_c, \"Turtle\");","map":{"version":3,"names":["React","useState","useEffect","useKeyboard","localTurtle","x","y","angle","penDown","penColor","lineWidth","Turtle","values","setValues","width","height","updateRotation","rotationSpeed","updatedAngle","turnLeft","turnRight","updatePosition","moveForward","movementSpeed","updatedPositionX","Math","cos","PI","updatedPositionY","sin","edgeGap"],"sources":["/Users/ericbollar/Desktop/BollarQuickenProject/src/Turtle.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useKeyboard } from './hooks/useKeyboard';\n\nconst localTurtle = {\n    x: 360,\n    y: 200,\n    angle: 0,\n    penDown: true,\n    penColor: '#000000',\n    lineWidth: 2\n}\n\nexport const Turtle = () => {\n    const[values, setValues] = useState(localTurtle);\n\n    // dimensions of canvas\n    const width = 800;\n    const height = 480;\n\n\n    function updateRotation() {\n        // if turning, update the turtle's angle\n        const rotationSpeed = 0.05;\n        let updatedAngle = localTurtle.angle - (turnLeft ? rotationSpeed : 0) + (turnRight ? rotationSpeed : 0);\n        // want to restrict angle between 0 and 360 \n        while (updatedAngle > 360) {\n            updatedAngle -= 360;\n        }\n        while (updatedAngle < 0) {\n            updatedAngle += 360\n        }\n        localTurtle.angle = updatedAngle;\n    }\n\n    const updatePosition = (moveForward) => {\n        // if moving forward, update the turtle's position based on it's local forward direction\n        const movementSpeed = 0.01; \n            // this is really movement distance, the speed is dependent on how fast each frame renders\n            // so it is likely the case that when drawing, the turtle moves slower (rendering takes more processing)\n            // this is not the best way to do it, but for time's sake i will leave it like this\n            // improvement here would be separating the thread for movement and rendering\n        let updatedPositionX = Math.cos(localTurtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + localTurtle.x;\n        let updatedPositionY = Math.sin(localTurtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + localTurtle.y;\n        if (moveForward) {\n            // if drawing, draw! don't want to be drawing pen and star at same time, so prioritize penIsDown\n            // if (penIsDown) {\n            //     //turtle.forward(movementSpeed);\n            // } else if (drawingStar) {\n            //     //turtle.drawStar();\n            // }\n    \n            // keeps the turtle within the bounds of the canvas, I set this edgeGap arbitrarily\n            // it's a bit finniky because the turtle's position is not the center of the triangle\n            // improvement here would involve re-aligning the center of turtle\n            const edgeGap = 8;\n            if (updatedPositionX > width - edgeGap) {\n                updatedPositionX = edgeGap;\n            } else if (updatedPositionX < edgeGap) {\n                updatedPositionX = width - edgeGap;\n            }\n            if (updatedPositionY > height - edgeGap) {\n                updatedPositionY = edgeGap;\n            } else if (updatedPositionY < edgeGap) {\n                updatedPositionY = height - edgeGap;\n            }\n    \n            localTurtle.x = updatedPositionX;\n            localTurtle.y = updatedPositionY;\n        // } else if (drawingStar) {\n        //     //turtle.drawStar();\n        // }\n        }\n    }\n\n    // setInterval(() => {\n    //     setValues({x: localTurtle.x, y: localTurtle.y, angle: localTurtle.angle});\n    // }, 50);\n\n    // useEffect(() => {\n    //     updatePosition();\n    // }, [moveForward])\n\n    // useEffect(() => {\n    //     updateRotation();\n    // }, [turnLeft, turnRight])\n\n    return {values, updatePosition};\n}\n\n// export const Turtle = props => {\n\n//     // turtle position\n//     const [x, setX] = useState(turtle.x);\n//     const [y, setY] = useState(turtle.y);\n//     const [angle, setAngle] = useState(turtle.angle);\n\n    \n\n    \n\n    \n\n//     // update state\n//     setInterval(() => {\n//         setX(turtle.x);\n//         setY(turtle.y);\n//         setAngle(turtle.angle);\n//     }, 50);\n\n//     useEffect(() => {\n//         updatePosition();\n//     }, [moveForward])\n\n//     useEffect(() => {\n//         updateRotation();\n//     }, [turnLeft, turnRight])\n\n//     return <></>\n// }"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,qBAAqB;AAEjD,MAAMC,WAAW,GAAG;EAChBC,CAAC,EAAE,GAAG;EACNC,CAAC,EAAE,GAAG;EACNC,KAAK,EAAE,CAAC;EACRC,OAAO,EAAE,IAAI;EACbC,QAAQ,EAAE,SAAS;EACnBC,SAAS,EAAE;AACf,CAAC;AAED,OAAO,MAAMC,MAAM,GAAG,MAAM;EAAA;EACxB,MAAK,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAACG,WAAW,CAAC;;EAEhD;EACA,MAAMU,KAAK,GAAG,GAAG;EACjB,MAAMC,MAAM,GAAG,GAAG;EAGlB,SAASC,cAAc,GAAG;IACtB;IACA,MAAMC,aAAa,GAAG,IAAI;IAC1B,IAAIC,YAAY,GAAGd,WAAW,CAACG,KAAK,IAAIY,QAAQ,GAAGF,aAAa,GAAG,CAAC,CAAC,IAAIG,SAAS,GAAGH,aAAa,GAAG,CAAC,CAAC;IACvG;IACA,OAAOC,YAAY,GAAG,GAAG,EAAE;MACvBA,YAAY,IAAI,GAAG;IACvB;IACA,OAAOA,YAAY,GAAG,CAAC,EAAE;MACrBA,YAAY,IAAI,GAAG;IACvB;IACAd,WAAW,CAACG,KAAK,GAAGW,YAAY;EACpC;EAEA,MAAMG,cAAc,GAAIC,WAAW,IAAK;IACpC;IACA,MAAMC,aAAa,GAAG,IAAI;IACtB;IACA;IACA;IACA;IACJ,IAAIC,gBAAgB,GAAGC,IAAI,CAACC,GAAG,CAACtB,WAAW,CAACG,KAAK,GAAGkB,IAAI,CAACE,EAAE,GAAG,GAAG,GAAGF,IAAI,CAACE,EAAE,GAAG,CAAC,CAAC,GAAGJ,aAAa,GAAGnB,WAAW,CAACC,CAAC;IAChH,IAAIuB,gBAAgB,GAAGH,IAAI,CAACI,GAAG,CAACzB,WAAW,CAACG,KAAK,GAAGkB,IAAI,CAACE,EAAE,GAAG,GAAG,GAAGF,IAAI,CAACE,EAAE,GAAG,CAAC,CAAC,GAAGJ,aAAa,GAAGnB,WAAW,CAACE,CAAC;IAChH,IAAIgB,WAAW,EAAE;MACb;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA,MAAMQ,OAAO,GAAG,CAAC;MACjB,IAAIN,gBAAgB,GAAGV,KAAK,GAAGgB,OAAO,EAAE;QACpCN,gBAAgB,GAAGM,OAAO;MAC9B,CAAC,MAAM,IAAIN,gBAAgB,GAAGM,OAAO,EAAE;QACnCN,gBAAgB,GAAGV,KAAK,GAAGgB,OAAO;MACtC;MACA,IAAIF,gBAAgB,GAAGb,MAAM,GAAGe,OAAO,EAAE;QACrCF,gBAAgB,GAAGE,OAAO;MAC9B,CAAC,MAAM,IAAIF,gBAAgB,GAAGE,OAAO,EAAE;QACnCF,gBAAgB,GAAGb,MAAM,GAAGe,OAAO;MACvC;MAEA1B,WAAW,CAACC,CAAC,GAAGmB,gBAAgB;MAChCpB,WAAW,CAACE,CAAC,GAAGsB,gBAAgB;MACpC;MACA;MACA;IACA;EACJ,CAAC;;EAED;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA,OAAO;IAAChB,MAAM;IAAES;EAAc,CAAC;AACnC,CAAC;;AAED;;AAEA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AAAA,GA1GaV,MAAM;AAAA,KAANA,MAAM;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}