{"ast":null,"code":"var _jsxFileName = \"/Users/ericbollar/Desktop/BollarQuickenProject/src/index.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { useFrame, useThree } from \"@react-three/fiber\";\nimport styles from './styles.js';\n\n// use our keyboard listener\nimport { useKeyboard } from './hooks/useKeyboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sizeEnum = {\n  small: [800, 480],\n  medium: [1024, 576],\n  large: [1280, 720],\n  'absolute unit': [1920, 1080]\n};\nconst turtle = {\n  x: 360,\n  y: 200,\n  angle: 0,\n  penDown: true,\n  penColor: '#000000',\n  lineWidth: 2\n};\nconst moveArray = ['shiftLeft', 'shiftRight', 'shiftUp', 'shiftDown'];\nfunction ReactRoot() {\n  _s();\n  // grab deconstructed list of actions from keyboard listener\n  const {\n    moveForward,\n    turnLeft,\n    turnRight,\n    penIsDown,\n    drawingStar\n  } = useKeyboard();\n  const [size, setSize] = useState('small');\n\n  // if turning, update the turtle's angle\n  const rotationSpeed = 0.05;\n  let updatedAngle = turtle.angle - (turnLeft ? rotationSpeed : 0) + (turnRight ? rotationSpeed : 0);\n  // want to restrict angle between 0 and 360 \n  while (updatedAngle > 360) {\n    updatedAngle -= 360;\n  }\n  while (updatedAngle < 0) {\n    updatedAngle += 360;\n  }\n  turtle.angle = updatedAngle;\n\n  // if moving forward, update the turtle's position based on it's local forward direction\n  const movementSpeed = 0.01;\n  // this is really movement distance, the speed is dependent on how fast each frame renders\n  // so it is likely the case that when drawing, the turtle moves slower (rendering takes more processing)\n  // this is not the best way to do it, but for time's sake i will leave it like this\n  const updatedPositionX = Math.cos(turtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + turtle.x;\n  const updatedPositionY = Math.sin(turtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + turtle.y;\n  if (moveForward) {\n    // if drawing, draw!\n    if (penIsDown) {\n      turtle.forward(movementSpeed);\n    }\n    turtle.x = updatedPositionX;\n    turtle.y = updatedPositionY;\n  }\n\n  // turtle position\n  const [x, setX] = useState(turtle.x);\n  const [y, setY] = useState(turtle.y);\n  const [angle, setAngle] = useState(turtle.angle);\n  setInterval(() => {\n    setX(turtle.x);\n    setY(turtle.y);\n    setAngle(turtle.angle);\n  }, 50);\n\n  // console.log('turtle X:', turtle.x, ' Y:', turtle.y, ' angle:', turtle.angle );\n  const width = sizeEnum[size][0];\n  const height = sizeEnum[size][1];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.root,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.header,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: styles.ellipseText,\n        children: \"Eric Bollar Quicken Project\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.stack,\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Canvas Size:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.row,\n          children: Object.keys(sizeEnum).map(key => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setSize(key);\n            },\n            style: {\n              ...styles.button,\n              backgroundColor: key === size && '#C9C7C5',\n              cursor: key !== size && 'pointer'\n            },\n            children: key\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.column,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearCanvas,\n        style: styles.button,\n        children: \"Reset Canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          ...styles.canvasWrapper,\n          width: width + 2,\n          height: height + 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            ...styles.turtle,\n            left: x,\n            top: y,\n            transform: `rotate(${angle}DEG)`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          id: \"myDrawing\",\n          width: width,\n          height: height\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        style: {\n          margin: 0\n        },\n        children: \"TURTLE FUNCTIONS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          ...styles.row,\n          ...styles.spacer\n        },\n        children: moveArray.map(key => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => turtle[key](),\n          style: styles.button,\n          children: key\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          ...styles.row,\n          maxWidth: width - 48\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n}\n// react insertion\n_s(ReactRoot, \"IaomqJXFnvzhykI4P6e0FzP1JRA=\", false, function () {\n  return [useKeyboard];\n});\n_c = ReactRoot;\nconst wrapper = document.getElementById(\"react-entry\");\nwrapper ? ReactDOM.render( /*#__PURE__*/_jsxDEV(ReactRoot, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 171,\n  columnNumber: 27\n}, this), wrapper) : false;\n\n// =====================================================================================\n//                                  GRAPHICS\n// =====================================================================================\n\n// canvas preparation\nconst canvas = document.getElementById('myDrawing');\nif (canvas && canvas.getContext) {\n  // does the browser support 'canvas'?\n  turtle.ct = canvas.getContext(\"2d\"); // get drawing context\n} else {\n  alert('You need a browser which supports the HTML5 canvas!');\n}\nfunction clearCanvas() {\n  if (canvas && canvas.getContext) {\n    const context = canvas.getContext(\"2d\");\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    turtle.x = 360;\n    turtle.y = 200;\n  }\n}\n\n//      Turtle functions\n// =======================================================\nturtle.logPenStatus = function () {\n  console.log('x=' + this.x + \"; y=\" + this.y + '; angle = ' + this.angle + '; penDown = ' + this.penDown);\n};\n\n// reposition turtle\nturtle.shiftLeft = function () {\n  let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n  turtle.x -= length;\n};\nturtle.shiftRight = function () {\n  let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n  turtle.x += length;\n};\nturtle.shiftUp = function () {\n  let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n  turtle.y -= length;\n};\nturtle.shiftDown = function () {\n  let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n  turtle.y += length;\n};\n\n// draw in a direction\nturtle.forward = function (length) {\n  // this.logPenStatus();\n  var x0 = this.x,\n    y0 = this.y;\n  const angleInRadians = this.angle * Math.PI / 180;\n  this.x += length * Math.sin(angleInRadians);\n  this.y += length * Math.cos(angleInRadians);\n  if (this.ct) {\n    if (this.penDown) {\n      //this.logPenStatus();\n      this.ct.beginPath();\n      this.ct.lineWidth = this.lineWidth;\n      this.ct.strokeStyle = this.penColor;\n      this.ct.moveTo(x0, y0);\n      this.ct.lineTo(this.x, this.y);\n      this.ct.stroke();\n    }\n  } else {\n    this.ct.moveTo(this.x, this.y);\n  }\n  return this;\n};\nturtle.backward = function (length) {\n  this.forward(-length);\n  return this;\n};\n\n// turning\nturtle.left = function (angle) {\n  this.angle += angle;\n  return this;\n};\nturtle.right = function (angle) {\n  this.left(-angle);\n  return this;\n};\n\n// ===============================================================\n//                      Pattern Functions\n// ===============================================================\n\nturtle.hexagon = function () {\n  let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n  console.log('length', length);\n  var i;\n  for (i = 1; i <= 6; i++) {\n    turtle.forward(length);\n    turtle.left(60);\n  }\n};\nturtle.drawStar = function () {\n  var i;\n  for (i = 0; i < 18; i++) {\n    turtle.left(100);\n    turtle.forward(80);\n  }\n};\n\n//  Oh Wow Look at this space\n// =======================================================\nvar _c;\n$RefreshReg$(_c, \"ReactRoot\");","map":{"version":3,"names":["React","useState","ReactDOM","useFrame","useThree","styles","useKeyboard","sizeEnum","small","medium","large","turtle","x","y","angle","penDown","penColor","lineWidth","moveArray","ReactRoot","moveForward","turnLeft","turnRight","penIsDown","drawingStar","size","setSize","rotationSpeed","updatedAngle","movementSpeed","updatedPositionX","Math","cos","PI","updatedPositionY","sin","forward","setX","setY","setAngle","setInterval","width","height","root","header","ellipseText","stack","row","Object","keys","map","key","button","backgroundColor","cursor","column","clearCanvas","canvasWrapper","left","top","transform","margin","spacer","maxWidth","wrapper","document","getElementById","render","canvas","getContext","ct","alert","context","clearRect","logPenStatus","console","log","shiftLeft","length","shiftRight","shiftUp","shiftDown","x0","y0","angleInRadians","beginPath","strokeStyle","moveTo","lineTo","stroke","backward","right","hexagon","i","drawStar"],"sources":["/Users/ericbollar/Desktop/BollarQuickenProject/src/index.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { useFrame, useThree } from \"@react-three/fiber\"\nimport styles from './styles.js';\n\n// use our keyboard listener\nimport { useKeyboard } from './hooks/useKeyboard';\n\nconst sizeEnum = {\n    small: [800, 480],\n    medium: [1024, 576],\n    large: [1280, 720],\n    'absolute unit': [1920, 1080],\n};\n\nconst turtle = {\n    x: 360,\n    y: 200,\n    angle: 0,\n    penDown: true,\n    penColor: '#000000',\n    lineWidth: 2\n};\nconst moveArray = ['shiftLeft', 'shiftRight', 'shiftUp', 'shiftDown'];\n\nfunction ReactRoot() {\n    // grab deconstructed list of actions from keyboard listener\n    const {moveForward, turnLeft, turnRight, penIsDown, drawingStar} = useKeyboard();\n\n    const [size, setSize] = useState('small');\n\n    // if turning, update the turtle's angle\n    const rotationSpeed = 0.05;\n    let updatedAngle = turtle.angle - (turnLeft ? rotationSpeed : 0) + (turnRight ? rotationSpeed : 0);\n    // want to restrict angle between 0 and 360 \n    while (updatedAngle > 360) {\n        updatedAngle -= 360;\n    }\n    while (updatedAngle < 0) {\n        updatedAngle += 360\n    }\n    turtle.angle = updatedAngle;\n\n    // if moving forward, update the turtle's position based on it's local forward direction\n    const movementSpeed = 0.01; \n        // this is really movement distance, the speed is dependent on how fast each frame renders\n        // so it is likely the case that when drawing, the turtle moves slower (rendering takes more processing)\n        // this is not the best way to do it, but for time's sake i will leave it like this\n    const updatedPositionX = Math.cos(turtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + turtle.x;\n    const updatedPositionY = Math.sin(turtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + turtle.y;\n    if (moveForward) {\n        // if drawing, draw!\n        if (penIsDown) {\n            turtle.forward(movementSpeed);\n        }\n        turtle.x = updatedPositionX;\n        turtle.y = updatedPositionY;\n    }\n\n    // turtle position\n    const [x, setX] = useState(turtle.x);\n    const [y, setY] = useState(turtle.y);\n    const [angle, setAngle] = useState(turtle.angle);\n\n    setInterval(() => {\n        setX(turtle.x);\n        setY(turtle.y);\n        setAngle(turtle.angle);\n    }, 50);\n\n\n    // console.log('turtle X:', turtle.x, ' Y:', turtle.y, ' angle:', turtle.angle );\n    const width = sizeEnum[size][0];\n    const height = sizeEnum[size][1];\n    return (\n        <div style={styles.root}>\n            <div style={styles.header}>\n                <h1 style={styles.ellipseText}>\n                    Eric Bollar Quicken Project\n                </h1>\n                <div style={styles.stack}>\n                    <h4>\n                        Canvas Size:\n                    </h4>\n                    <div style={styles.row}>\n                        {Object.keys(sizeEnum).map((key) =>\n                            <button\n                                key={key}\n                                onClick={() => {setSize(key)}}\n                                style={{\n                                    ...styles.button,\n                                    backgroundColor: key === size && '#C9C7C5',\n                                    cursor: key !== size && 'pointer',\n                                }}\n                            >\n                                {key}\n                            </button>\n                        )}\n                    </div>\n                </div>\n            </div>\n            <div style={styles.column}>\n                <button\n                    onClick={clearCanvas}\n                    style={styles.button}\n                >\n                    Reset Canvas\n                </button>\n                <div style={{...styles.canvasWrapper, width: width + 2, height: height + 2 }}>\n                    <div\n                        style={{\n                            ...styles.turtle,\n                            left: x,\n                            top: y,\n                            transform: `rotate(${angle}DEG)`,\n                        }}\n                    />\n                    <canvas\n                        id=\"myDrawing\"\n                        width={width}\n                        height={height}\n                    />\n                </div>\n                <h4 style={{ margin: 0 }}>\n                    TURTLE FUNCTIONS\n                </h4>\n\n                <div style={{ ...styles.row, ...styles.spacer}}>\n                    {moveArray.map((key) =>\n                        <button\n                            key={key}\n                            onClick={() => turtle[key]()}\n                            style={styles.button}\n                        >\n                            {key}\n                        </button>\n                    )}\n                </div>\n\n                <div style={{ ...styles.row, maxWidth: width - 48 }}>\n                    {/* <button\n                        onClick={() => turtle.hexagon()}\n                        style={styles.blueButton}\n                    >\n                        Hexagon\n                    </button> */}\n                    {/* <button\n                        onClick={() => turtle.drawStar()}\n                        style={styles.blueButton}\n                    >\n                        Star\n                    </button> */}\n                    {/*\n                    // ================================================================================\n                    //                      Maybe things should go here?\n                    // ================================================================================\n                    */}\n                    {/* <button\n                        onClick={() => console.log('yo')}\n                        style={styles.blueButton}\n                    >\n                        Custom ???\n                    </button> */}\n                </div>\n            </div>\n        </div>\n    );\n}\n// react insertion\nconst wrapper = document.getElementById(\"react-entry\");\nwrapper ? ReactDOM.render(<ReactRoot />, wrapper) : false;\n\n\n\n\n// =====================================================================================\n//                                  GRAPHICS\n// =====================================================================================\n\n\n// canvas preparation\nconst canvas = document.getElementById('myDrawing');\n\nif (canvas && canvas.getContext) { // does the browser support 'canvas'?\n    turtle.ct = canvas.getContext(\"2d\"); // get drawing context\n} else {\n    alert('You need a browser which supports the HTML5 canvas!');\n}\n\nfunction clearCanvas () {\n    if (canvas && canvas.getContext) {\n        const context = canvas.getContext(\"2d\");\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        turtle.x = 360;\n        turtle.y = 200;\n    }\n}\n\n\n//      Turtle functions\n// =======================================================\nturtle.logPenStatus = function () {\n    console.log('x=' + this.x + \"; y=\" + this.y + '; angle = ' + this.angle + '; penDown = ' + this.penDown);\n};\n\n// reposition turtle\nturtle.shiftLeft = function (length=50) {\n    turtle.x -= length;\n};\nturtle.shiftRight = function (length=50) {\n    turtle.x += length;\n};\nturtle.shiftUp = function (length=50) {\n    turtle.y -= length;\n};\nturtle.shiftDown = function (length=50) {\n    turtle.y += length;\n};\n\n// draw in a direction\nturtle.forward = function (length) {\n    // this.logPenStatus();\n    var x0 = this.x,\n        y0 = this.y;\n    const angleInRadians = (this.angle * Math.PI) / 180;\n    this.x += length * Math.sin(angleInRadians);\n    this.y += length * Math.cos(angleInRadians);\n    if (this.ct) {\n        if (this.penDown) {\n            //this.logPenStatus();\n            this.ct.beginPath();\n            this.ct.lineWidth = this.lineWidth;\n            this.ct.strokeStyle = this.penColor;\n            this.ct.moveTo(x0, y0);\n            this.ct.lineTo(this.x, this.y);\n            this.ct.stroke();\n        }\n    } else {\n        this.ct.moveTo(this.x, this.y);\n    }\n    return this;\n};\nturtle.backward = function (length) {\n    this.forward(-length);\n    return this;\n};\n\n// turning\nturtle.left = function (angle) {\n    this.angle += angle;\n    return this;\n};\nturtle.right = function (angle) {\n    this.left(-angle);\n    return this;\n};\n\n\n// ===============================================================\n//                      Pattern Functions\n// ===============================================================\n\nturtle.hexagon = function (length=50) {\n    console.log('length', length);\n    var i;\n    for (i = 1; i <= 6; i++) {\n        turtle.forward(length);\n        turtle.left(60);\n\n    }\n};\n\nturtle.drawStar = function () {\n    var i;\n    for (i = 0; i < 18; i++) {\n        turtle.left(100);\n        turtle.forward(80);\n    }\n};\n\n\n\n//  Oh Wow Look at this space\n// =======================================================\n\n\n\n\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}