{"ast":null,"code":"var _jsxFileName = \"/Users/ericbollar/Desktop/BollarQuickenProject/src/Turtle.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useKeyboard } from './hooks/useKeyboard';\nimport { Canvas } from \"./Canvas\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst localTurtle = {\n  x: 360,\n  y: 200,\n  angle: 0,\n  penDown: true,\n  penColor: '#000000',\n  lineWidth: 2\n};\nconst Turtle = props => {\n  _s();\n  const c = Canvas();\n  const [values, setValues] = useState(localTurtle);\n\n  // dimensions of canvas\n  const width = 800;\n  const height = 480;\n\n  // grab deconstructed list of actions from keyboard listener\n  const {\n    moveForward,\n    turnLeft,\n    turnRight,\n    penIsDown,\n    drawingStar\n  } = useKeyboard();\n  function updatePosition() {\n    // if moving forward, update the turtle's position based on it's local forward direction\n    const movementSpeed = 1;\n    // this is really movement distance, the speed is dependent on how fast each frame renders\n    // so it is likely the case that when drawing, the turtle moves slower (rendering takes more processing)\n    // this is not the best way to do it, but for time's sake i will leave it like this\n    // improvement here would be separating the thread for movement and rendering\n    let updatedPositionX = Math.cos(localTurtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + localTurtle.x;\n    let updatedPositionY = Math.sin(localTurtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + localTurtle.y;\n    if (moveForward) {\n      // if drawing, draw! don't want to be drawing pen and star at same time, so prioritize penIsDown\n      // if (penIsDown) {\n      //     //turtle.forward(movementSpeed);\n      // } else if (drawingStar) {\n      //     //turtle.drawStar();\n      // }\n\n      // keeps the turtle within the bounds of the canvas, I set this edgeGap arbitrarily\n      // it's a bit finniky because the turtle's position is not the center of the triangle\n      // improvement here would involve re-aligning the center of turtle\n      const edgeGap = 8;\n      if (updatedPositionX > width - edgeGap) {\n        updatedPositionX = edgeGap;\n      } else if (updatedPositionX < edgeGap) {\n        updatedPositionX = width - edgeGap;\n      }\n      if (updatedPositionY > height - edgeGap) {\n        updatedPositionY = edgeGap;\n      } else if (updatedPositionY < edgeGap) {\n        updatedPositionY = height - edgeGap;\n      }\n      localTurtle.x = updatedPositionX;\n      localTurtle.y = updatedPositionY;\n      // } else if (drawingStar) {\n      //     //turtle.drawStar();\n      // }\n    }\n  }\n\n  setInterval(() => {\n    updatePosition();\n    updateRotation();\n    setValues({\n      x: localTurtle.x,\n      y: localTurtle.y,\n      angle: localTurtle.angle\n    });\n    console.log(localTurtle.x, localTurtle.y, localTurtle.angle);\n  }, 100);\n  useEffect(() => {}, [moveForward]);\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    turtleX: localTurtle.x,\n    turtleY: localTurtle.y\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 12\n  }, this);\n};\n_s(Turtle, \"uKhkY2KCHJAOcJmUO9ESVjIY9rU=\", false, function () {\n  return [useKeyboard];\n});\n_c = Turtle;\nexport default Turtle;\n\n// export const Turtle = props => {\n\n//     // turtle position\n//     const [x, setX] = useState(turtle.x);\n//     const [y, setY] = useState(turtle.y);\n//     const [angle, setAngle] = useState(turtle.angle);\n\n//     // update state\n//     setInterval(() => {\n//         setX(turtle.x);\n//         setY(turtle.y);\n//         setAngle(turtle.angle);\n//     }, 50);\n\n//     useEffect(() => {\n//         updatePosition();\n//     }, [moveForward])\n\n//     useEffect(() => {\n//         updateRotation();\n//     }, [turnLeft, turnRight])\n\n//     return <></>\n// }\nvar _c;\n$RefreshReg$(_c, \"Turtle\");","map":{"version":3,"names":["React","useState","useEffect","useKeyboard","Canvas","localTurtle","x","y","angle","penDown","penColor","lineWidth","Turtle","props","c","values","setValues","width","height","moveForward","turnLeft","turnRight","penIsDown","drawingStar","updatePosition","movementSpeed","updatedPositionX","Math","cos","PI","updatedPositionY","sin","edgeGap","setInterval","updateRotation","console","log"],"sources":["/Users/ericbollar/Desktop/BollarQuickenProject/src/Turtle.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useKeyboard } from './hooks/useKeyboard';\nimport { Canvas } from \"./Canvas\";\n\nconst localTurtle = {\n    x: 360,\n    y: 200,\n    angle: 0,\n    penDown: true,\n    penColor: '#000000',\n    lineWidth: 2\n}\n\nconst Turtle = (props) => {\n\n    const c = Canvas();\n    const[values, setValues] = useState(localTurtle);\n\n    // dimensions of canvas\n    const width = 800;\n    const height = 480;\n\n    // grab deconstructed list of actions from keyboard listener\n    const {moveForward, turnLeft, turnRight, penIsDown, drawingStar} = useKeyboard();\n\n    \n\n    function updatePosition() {\n        // if moving forward, update the turtle's position based on it's local forward direction\n        const movementSpeed = 1; \n            // this is really movement distance, the speed is dependent on how fast each frame renders\n            // so it is likely the case that when drawing, the turtle moves slower (rendering takes more processing)\n            // this is not the best way to do it, but for time's sake i will leave it like this\n            // improvement here would be separating the thread for movement and rendering\n        let updatedPositionX = Math.cos(localTurtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + localTurtle.x;\n        let updatedPositionY = Math.sin(localTurtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + localTurtle.y;\n        if (moveForward) {\n            // if drawing, draw! don't want to be drawing pen and star at same time, so prioritize penIsDown\n            // if (penIsDown) {\n            //     //turtle.forward(movementSpeed);\n            // } else if (drawingStar) {\n            //     //turtle.drawStar();\n            // }\n    \n            // keeps the turtle within the bounds of the canvas, I set this edgeGap arbitrarily\n            // it's a bit finniky because the turtle's position is not the center of the triangle\n            // improvement here would involve re-aligning the center of turtle\n            const edgeGap = 8;\n            if (updatedPositionX > width - edgeGap) {\n                updatedPositionX = edgeGap;\n            } else if (updatedPositionX < edgeGap) {\n                updatedPositionX = width - edgeGap;\n            }\n            if (updatedPositionY > height - edgeGap) {\n                updatedPositionY = edgeGap;\n            } else if (updatedPositionY < edgeGap) {\n                updatedPositionY = height - edgeGap;\n            }\n    \n            localTurtle.x = updatedPositionX;\n            localTurtle.y = updatedPositionY;\n        // } else if (drawingStar) {\n        //     //turtle.drawStar();\n        // }\n        }\n    }\n\n    setInterval(() => {\n        updatePosition();\n        updateRotation();\n        setValues({x: localTurtle.x, y: localTurtle.y, angle: localTurtle.angle});\n        console.log(localTurtle.x, localTurtle.y, localTurtle.angle);\n    }, 100);\n\n    useEffect(() => {\n        \n    }, [moveForward])\n\n    return <Canvas turtleX={localTurtle.x} turtleY={localTurtle.y}/>;\n}\n\nexport default Turtle\n\n// export const Turtle = props => {\n\n//     // turtle position\n//     const [x, setX] = useState(turtle.x);\n//     const [y, setY] = useState(turtle.y);\n//     const [angle, setAngle] = useState(turtle.angle);\n\n    \n\n    \n\n    \n\n//     // update state\n//     setInterval(() => {\n//         setX(turtle.x);\n//         setY(turtle.y);\n//         setAngle(turtle.angle);\n//     }, 50);\n\n//     useEffect(() => {\n//         updatePosition();\n//     }, [moveForward])\n\n//     useEffect(() => {\n//         updateRotation();\n//     }, [turnLeft, turnRight])\n\n//     return <></>\n// }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}