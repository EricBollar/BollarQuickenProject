{"ast":null,"code":"var _jsxFileName = \"/Users/ericbollar/Desktop/BollarQuickenProject/src/Navbar.js\";\nimport React from \"react\";\nimport styles from './styles.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Navbar = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.header,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: styles.ellipseText,\n        children: \"Eric Bollar Quicken Project\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.stack,\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Canvas Size:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\n// const sizeEnum = {\n//     small: [800, 480],\n//     medium: [1024, 576],\n//     large: [1280, 720],\n//     'absolute unit': [1920, 1080],\n// };\n\n// const turtle = {\n//     x: 360,\n//     y: 200,\n//     angle: 0,\n//     penDown: true,\n//     penColor: '#000000',\n//     lineWidth: 2\n// };\n// const moveArray = ['shiftLeft', 'shiftRight', 'shiftUp', 'shiftDown'];\n\n// function ReactRoot(){\n//     const [size, setSize] = useState('small');\n\n//     // turtle position\n//     const [x, setX] = useState(turtle.x);\n//     const [y, setY] = useState(turtle.y);\n//     const [angle, setAngle] = useState(turtle.angle);\n\n//     setInterval(() => {\n//         setX(turtle.x);\n//         setY(turtle.y);\n//         setAngle(turtle.angle);\n//     }, 50);\n\n//     console.log('turtle X:', turtle.x, ' Y:', turtle.y, ' angle:', turtle.angle );\n//     const width = sizeEnum[size][0];\n//     const height = sizeEnum[size][1];\n//     return (\n//         <div style={styles.root}>\n//             <div style={styles.header}>\n//                 <h1 style={styles.ellipseText}>\n//                     Internship Whitespace\n//                 </h1>\n//                 <div style={styles.stack}>\n//                     <h4>\n//                         Canvas Size:\n//                     </h4>\n//                     <div style={styles.row}>\n//                         {Object.keys(sizeEnum).map((key) =>\n//                             <button\n//                                 key={key}\n//                                 onClick={() => {setSize(key)}}\n//                                 style={{\n//                                     ...styles.button,\n//                                     backgroundColor: key === size && '#C9C7C5',\n//                                     cursor: key !== size && 'pointer',\n//                                 }}\n//                             >\n//                                 {key}\n//                             </button>\n//                         )}\n//                     </div>\n//                 </div>\n//             </div>\n//             <div style={styles.column}>\n//                 <button\n//                     onClick={clearCanvas}\n//                     style={styles.button}\n//                 >\n//                     Reset Canvas\n//                 </button>\n//                 <div style={{...styles.canvasWrapper, width: width + 2, height: height + 2 }}>\n//                     <div\n//                         style={{\n//                             ...styles.turtle,\n//                             left: x,\n//                             top: y,\n//                             transform: `rotate(${angle}DEG)`,\n//                         }}\n//                     />\n//                     <canvas\n//                         id=\"myDrawing\"\n//                         width={width}\n//                         height={height}\n//                     />\n//                 </div>\n//                 <h4 style={{ margin: 0 }}>\n//                     TURTLE FUNCTIONS\n//                 </h4>\n\n//                 <div style={{ ...styles.row, ...styles.spacer}}>\n//                     {moveArray.map((key) =>\n//                         <button\n//                             key={key}\n//                             onClick={() => turtle[key]()}\n//                             style={styles.button}\n//                         >\n//                             {key}\n//                         </button>\n//                     )}\n//                 </div>\n\n//                 <div style={{ ...styles.row, maxWidth: width - 48 }}>\n//                     <button\n//                         onClick={() => turtle.hexagon()}\n//                         style={styles.blueButton}\n//                     >\n//                         Hexagon\n//                     </button>\n//                     <button\n//                         onClick={() => turtle.drawStar()}\n//                         style={styles.blueButton}\n//                     >\n//                         Star\n//                     </button>\n//                     {/*\n//                     // ================================================================================\n//                     //                      Maybe things should go here?\n//                     // ================================================================================\n//                     */}\n//                     <button\n//                         onClick={() => console.log('yo')}\n//                         style={styles.blueButton}\n//                     >\n//                         Custom ???\n//                     </button>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// }\n// // react insertion\n// const wrapper = document.getElementById(\"react-entry\");\n// wrapper ? ReactDOM.render(<ReactRoot />, wrapper) : false;\n\n// // =====================================================================================\n// //                                  GRAPHICS\n// // =====================================================================================\n\n// // canvas preparation\n// const canvas = document.getElementById('myDrawing');\n\n// if (canvas && canvas.getContext) { // does the browser support 'canvas'?\n//     turtle.ct = canvas.getContext(\"2d\"); // get drawing context\n// } else {\n//     alert('You need a browser which supports the HTML5 canvas!');\n// }\n\n// function clearCanvas () {\n//     if (canvas && canvas.getContext) {\n//         const context = canvas.getContext(\"2d\");\n//         context.clearRect(0, 0, canvas.width, canvas.height);\n//         turtle.x = 360;\n//         turtle.y = 200;\n//     }\n// }\n\n// //      Turtle functions\n// // =======================================================\n// turtle.logPenStatus = function () {\n//     console.log('x=' + this.x + \"; y=\" + this.y + '; angle = ' + this.angle + '; penDown = ' + this.penDown);\n// };\n\n// // reposition turtle\n// turtle.shiftLeft = function (length=50) {\n//     turtle.x -= length;\n// };\n// turtle.shiftRight = function (length=50) {\n//     turtle.x += length;\n// };\n// turtle.shiftUp = function (length=50) {\n//     turtle.y -= length;\n// };\n// turtle.shiftDown = function (length=50) {\n//     turtle.y += length;\n// };\n\n// // draw in a direction\n// turtle.forward = function (length) {\n//     // this.logPenStatus();\n//     var x0 = this.x,\n//         y0 = this.y;\n//     const angleInRadians = (this.angle * Math.PI) / 180;\n//     this.x += length * Math.sin(angleInRadians);\n//     this.y += length * Math.cos(angleInRadians);\n//     if (this.ct) {\n//         if (this.penDown) {\n//             //this.logPenStatus();\n//             this.ct.beginPath();\n//             this.ct.lineWidth = this.lineWidth;\n//             this.ct.strokeStyle = this.penColor;\n//             this.ct.moveTo(x0, y0);\n//             this.ct.lineTo(this.x, this.y);\n//             this.ct.stroke();\n//         }\n//     } else {\n//         this.ct.moveTo(this.x, this.y);\n//     }\n//     return this;\n// };\n// turtle.backward = function (length) {\n//     this.forward(-length);\n//     return this;\n// };\n\n// // turning\n// turtle.left = function (angle) {\n//     this.angle += angle;\n//     return this;\n// };\n// turtle.right = function (angle) {\n//     this.left(-angle);\n//     return this;\n// };\n\n// // ===============================================================\n// //                      Pattern Functions\n// // ===============================================================\n\n// turtle.hexagon = function (length=50) {\n//     console.log('length', length);\n//     var i;\n//     for (i = 1; i <= 6; i++) {\n//         turtle.forward(length);\n//         turtle.left(60);\n\n//     }\n// };\n\n// turtle.drawStar = function () {\n//     var i;\n//     for (i = 0; i < 18; i++) {\n//         turtle.left(100);\n//         turtle.forward(80);\n//     }\n// };\n\n// //  Oh Wow Look at this space\n// // =======================================================\n_c = Navbar;\nvar _c;\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"names":["React","styles","Navbar","header","ellipseText","stack"],"sources":["/Users/ericbollar/Desktop/BollarQuickenProject/src/Navbar.js"],"sourcesContent":["import React from \"react\";\nimport styles from './styles.js';\n\nexport const Navbar = () => {\n    return <>\n    <div style={styles.header}>\n        <h1 style={styles.ellipseText}>\n            Eric Bollar Quicken Project\n        </h1>\n        <div style={styles.stack}>\n            <h4>\n                Canvas Size:\n            </h4>\n            {/* <div style={styles.row}>\n                {Object.keys(sizeEnum).map((key) =>\n                    <button\n                        key={key}\n                        onClick={() => {setSize(key)}}\n                        style={{\n                            ...styles.button,\n                            backgroundColor: key === size && '#C9C7C5',\n                            cursor: key !== size && 'pointer',\n                        }}\n                    >\n                        {key}\n                    </button>\n                )}\n            </div> */}\n        </div>\n    </div>\n    </>\n}\n\n\n// const sizeEnum = {\n//     small: [800, 480],\n//     medium: [1024, 576],\n//     large: [1280, 720],\n//     'absolute unit': [1920, 1080],\n// };\n\n// const turtle = {\n//     x: 360,\n//     y: 200,\n//     angle: 0,\n//     penDown: true,\n//     penColor: '#000000',\n//     lineWidth: 2\n// };\n// const moveArray = ['shiftLeft', 'shiftRight', 'shiftUp', 'shiftDown'];\n\n// function ReactRoot(){\n//     const [size, setSize] = useState('small');\n\n//     // turtle position\n//     const [x, setX] = useState(turtle.x);\n//     const [y, setY] = useState(turtle.y);\n//     const [angle, setAngle] = useState(turtle.angle);\n\n//     setInterval(() => {\n//         setX(turtle.x);\n//         setY(turtle.y);\n//         setAngle(turtle.angle);\n//     }, 50);\n\n\n//     console.log('turtle X:', turtle.x, ' Y:', turtle.y, ' angle:', turtle.angle );\n//     const width = sizeEnum[size][0];\n//     const height = sizeEnum[size][1];\n//     return (\n//         <div style={styles.root}>\n//             <div style={styles.header}>\n//                 <h1 style={styles.ellipseText}>\n//                     Internship Whitespace\n//                 </h1>\n//                 <div style={styles.stack}>\n//                     <h4>\n//                         Canvas Size:\n//                     </h4>\n//                     <div style={styles.row}>\n//                         {Object.keys(sizeEnum).map((key) =>\n//                             <button\n//                                 key={key}\n//                                 onClick={() => {setSize(key)}}\n//                                 style={{\n//                                     ...styles.button,\n//                                     backgroundColor: key === size && '#C9C7C5',\n//                                     cursor: key !== size && 'pointer',\n//                                 }}\n//                             >\n//                                 {key}\n//                             </button>\n//                         )}\n//                     </div>\n//                 </div>\n//             </div>\n//             <div style={styles.column}>\n//                 <button\n//                     onClick={clearCanvas}\n//                     style={styles.button}\n//                 >\n//                     Reset Canvas\n//                 </button>\n//                 <div style={{...styles.canvasWrapper, width: width + 2, height: height + 2 }}>\n//                     <div\n//                         style={{\n//                             ...styles.turtle,\n//                             left: x,\n//                             top: y,\n//                             transform: `rotate(${angle}DEG)`,\n//                         }}\n//                     />\n//                     <canvas\n//                         id=\"myDrawing\"\n//                         width={width}\n//                         height={height}\n//                     />\n//                 </div>\n//                 <h4 style={{ margin: 0 }}>\n//                     TURTLE FUNCTIONS\n//                 </h4>\n\n//                 <div style={{ ...styles.row, ...styles.spacer}}>\n//                     {moveArray.map((key) =>\n//                         <button\n//                             key={key}\n//                             onClick={() => turtle[key]()}\n//                             style={styles.button}\n//                         >\n//                             {key}\n//                         </button>\n//                     )}\n//                 </div>\n\n//                 <div style={{ ...styles.row, maxWidth: width - 48 }}>\n//                     <button\n//                         onClick={() => turtle.hexagon()}\n//                         style={styles.blueButton}\n//                     >\n//                         Hexagon\n//                     </button>\n//                     <button\n//                         onClick={() => turtle.drawStar()}\n//                         style={styles.blueButton}\n//                     >\n//                         Star\n//                     </button>\n//                     {/*\n//                     // ================================================================================\n//                     //                      Maybe things should go here?\n//                     // ================================================================================\n//                     */}\n//                     <button\n//                         onClick={() => console.log('yo')}\n//                         style={styles.blueButton}\n//                     >\n//                         Custom ???\n//                     </button>\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// }\n// // react insertion\n// const wrapper = document.getElementById(\"react-entry\");\n// wrapper ? ReactDOM.render(<ReactRoot />, wrapper) : false;\n\n\n\n\n// // =====================================================================================\n// //                                  GRAPHICS\n// // =====================================================================================\n\n\n// // canvas preparation\n// const canvas = document.getElementById('myDrawing');\n\n// if (canvas && canvas.getContext) { // does the browser support 'canvas'?\n//     turtle.ct = canvas.getContext(\"2d\"); // get drawing context\n// } else {\n//     alert('You need a browser which supports the HTML5 canvas!');\n// }\n\n// function clearCanvas () {\n//     if (canvas && canvas.getContext) {\n//         const context = canvas.getContext(\"2d\");\n//         context.clearRect(0, 0, canvas.width, canvas.height);\n//         turtle.x = 360;\n//         turtle.y = 200;\n//     }\n// }\n\n\n// //      Turtle functions\n// // =======================================================\n// turtle.logPenStatus = function () {\n//     console.log('x=' + this.x + \"; y=\" + this.y + '; angle = ' + this.angle + '; penDown = ' + this.penDown);\n// };\n\n// // reposition turtle\n// turtle.shiftLeft = function (length=50) {\n//     turtle.x -= length;\n// };\n// turtle.shiftRight = function (length=50) {\n//     turtle.x += length;\n// };\n// turtle.shiftUp = function (length=50) {\n//     turtle.y -= length;\n// };\n// turtle.shiftDown = function (length=50) {\n//     turtle.y += length;\n// };\n\n// // draw in a direction\n// turtle.forward = function (length) {\n//     // this.logPenStatus();\n//     var x0 = this.x,\n//         y0 = this.y;\n//     const angleInRadians = (this.angle * Math.PI) / 180;\n//     this.x += length * Math.sin(angleInRadians);\n//     this.y += length * Math.cos(angleInRadians);\n//     if (this.ct) {\n//         if (this.penDown) {\n//             //this.logPenStatus();\n//             this.ct.beginPath();\n//             this.ct.lineWidth = this.lineWidth;\n//             this.ct.strokeStyle = this.penColor;\n//             this.ct.moveTo(x0, y0);\n//             this.ct.lineTo(this.x, this.y);\n//             this.ct.stroke();\n//         }\n//     } else {\n//         this.ct.moveTo(this.x, this.y);\n//     }\n//     return this;\n// };\n// turtle.backward = function (length) {\n//     this.forward(-length);\n//     return this;\n// };\n\n// // turning\n// turtle.left = function (angle) {\n//     this.angle += angle;\n//     return this;\n// };\n// turtle.right = function (angle) {\n//     this.left(-angle);\n//     return this;\n// };\n\n\n// // ===============================================================\n// //                      Pattern Functions\n// // ===============================================================\n\n// turtle.hexagon = function (length=50) {\n//     console.log('length', length);\n//     var i;\n//     for (i = 1; i <= 6; i++) {\n//         turtle.forward(length);\n//         turtle.left(60);\n\n//     }\n// };\n\n// turtle.drawStar = function () {\n//     var i;\n//     for (i = 0; i < 18; i++) {\n//         turtle.left(100);\n//         turtle.forward(80);\n//     }\n// };\n\n\n\n// //  Oh Wow Look at this space\n// // =======================================================\n\n\n\n\n\n\n\n\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,aAAa;AAAC;AAAA;AAEjC,OAAO,MAAMC,MAAM,GAAG,MAAM;EACxB,oBAAO;IAAA,uBACP;MAAK,KAAK,EAAED,MAAM,CAACE,MAAO;MAAA,wBACtB;QAAI,KAAK,EAAEF,MAAM,CAACG,WAAY;QAAA,UAAC;MAE/B;QAAA;QAAA;QAAA;MAAA,QAAK,eACL;QAAK,KAAK,EAAEH,MAAM,CAACI,KAAM;QAAA,uBACrB;UAAA,UAAI;QAEJ;UAAA;UAAA;UAAA;QAAA;MAAK;QAAA;QAAA;QAAA;MAAA,QAgBH;IAAA;MAAA;MAAA;MAAA;IAAA;EACJ,iBACH;AACP,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AAAA,KAnRaH,MAAM;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}