{"ast":null,"code":"var _jsxFileName = \"/Users/ericbollar/Desktop/BollarQuickenProject/src/index.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport styles from './styles.js';\n\n// use our keyboard listener\nimport { useKeyboard } from './hooks/useKeyboard';\n\n// const sizeEnum = {\n//     small: [800, 480],\n//     medium: [1024, 576],\n//     large: [1280, 720],\n//     'absolute unit': [1920, 1080],\n// };\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst turtle = {\n  x: 360,\n  y: 200,\n  angle: 0,\n  penDown: true,\n  penColor: '#000000',\n  lineWidth: 2\n};\n// const moveArray = ['shiftLeft', 'shiftRight', 'shiftUp', 'shiftDown'];\n\nfunction ReactRoot() {\n  _s();\n  // grab deconstructed list of actions from keyboard listener\n  const {\n    moveForward,\n    turnLeft,\n    turnRight,\n    penIsDown,\n    drawingStar\n  } = useKeyboard();\n\n  // const [size, setSize] = useState('small');\n  const width = 800;\n  const height = 480;\n\n  // if turning, update the turtle's angle\n  const rotationSpeed = 0.05;\n  let updatedAngle = turtle.angle - (turnLeft ? rotationSpeed : 0) + (turnRight ? rotationSpeed : 0);\n  // want to restrict angle between 0 and 360 \n  while (updatedAngle > 360) {\n    updatedAngle -= 360;\n  }\n  while (updatedAngle < 0) {\n    updatedAngle += 360;\n  }\n  turtle.angle = updatedAngle;\n\n  // if moving forward, update the turtle's position based on it's local forward direction\n  const movementSpeed = 0.01;\n  // this is really movement distance, the speed is dependent on how fast each frame renders\n  // so it is likely the case that when drawing, the turtle moves slower (rendering takes more processing)\n  // this is not the best way to do it, but for time's sake i will leave it like this\n  // improvement here would be separating the thread for movement and rendering\n  let updatedPositionX = Math.cos(turtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + turtle.x;\n  let updatedPositionY = Math.sin(turtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + turtle.y;\n  if (moveForward) {\n    // if drawing, draw! don't want to be drawing pen and star at same time, so prioritize penIsDown\n    if (penIsDown) {\n      turtle.forward(movementSpeed);\n    } else if (drawingStar) {\n      turtle.drawStar();\n    }\n    turtle.x = updatedPositionX;\n    turtle.y = updatedPositionY;\n  } else if (drawingStar) {\n    turtle.drawStar();\n  }\n\n  // keeps the turtle within the bounds of the canvas, I set this edgeGap arbitrarily\n  // it's a bit finniky because the turtle's position is not the center of the triangle\n  // improvement here would involve re-aligning the center of turtle\n  const edgeGap = 8;\n  if (updatedPositionX > width - edgeGap) {\n    updatedPositionX = edgeGap;\n  } else if (updatedPositionX < edgeGap) {\n    updatedPositionX = width - edgeGap;\n  }\n  if (updatedPositionY > height - edgeGap) {\n    updatedPositionY = edgeGap;\n  } else if (updatedPositionY < edgeGap) {\n    updatedPositionY = height - edgeGap;\n  }\n\n  // turtle position\n  const [x, setX] = useState(turtle.x);\n  const [y, setY] = useState(turtle.y);\n  const [angle, setAngle] = useState(turtle.angle);\n  setInterval(() => {\n    setX(turtle.x);\n    setY(turtle.y);\n    setAngle(turtle.angle);\n  }, 50);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.root,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.header,\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: styles.ellipseText,\n        children: \"Eric Bollar Quicken Project\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.column,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearCanvas,\n        style: styles.button,\n        children: \"Reset Canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          ...styles.canvasWrapper,\n          width: width + 2,\n          height: height + 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            ...styles.turtle,\n            left: x,\n            top: y,\n            transform: `rotate(${angle}DEG)`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          id: \"myDrawing\",\n          width: width,\n          height: height\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          ...styles.row,\n          ...styles.spacer\n        },\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Thanks for viewing my project! This is Turtle. You can move Turtle forward with 'W' and turn him with 'A' and 'D'. You can draw lines while moving by holding SPACE or by pressing '1', in which case Turtle will draw a star!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          ...styles.row,\n          maxWidth: width - 48\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n}\n// react insertion\n_s(ReactRoot, \"y7WMYoLGM0ZKHIxxrq/4uwD13H0=\", false, function () {\n  return [useKeyboard];\n});\n_c = ReactRoot;\nconst wrapper = document.getElementById(\"react-entry\");\nwrapper ? ReactDOM.render( /*#__PURE__*/_jsxDEV(ReactRoot, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 192,\n  columnNumber: 27\n}, this), wrapper) : false;\n\n// =====================================================================================\n//                                  GRAPHICS\n// =====================================================================================\n\n// canvas preparation\nconst canvas = document.getElementById('myDrawing');\nif (canvas && canvas.getContext) {\n  // does the browser support 'canvas'?\n  turtle.ct = canvas.getContext(\"2d\"); // get drawing context\n} else {\n  alert('You need a browser which supports the HTML5 canvas!');\n}\nfunction clearCanvas() {\n  if (canvas && canvas.getContext) {\n    const context = canvas.getContext(\"2d\");\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    turtle.x = 360;\n    turtle.y = 200;\n  }\n}\n\n//      Turtle functions\n// =======================================================\nturtle.logPenStatus = function () {\n  console.log('x=' + this.x + \"; y=\" + this.y + '; angle = ' + this.angle + '; penDown = ' + this.penDown);\n};\n\n// reposition turtle\nturtle.shiftLeft = function () {\n  let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n  turtle.x -= length;\n};\nturtle.shiftRight = function () {\n  let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n  turtle.x += length;\n};\nturtle.shiftUp = function () {\n  let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n  turtle.y -= length;\n};\nturtle.shiftDown = function () {\n  let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n  turtle.y += length;\n};\n\n// draw in a direction\nturtle.forward = function (length) {\n  // this.logPenStatus();\n  var x0 = this.x,\n    y0 = this.y;\n  const angleInRadians = this.angle * Math.PI / 180;\n  this.x += length * Math.sin(angleInRadians);\n  this.y += length * Math.cos(angleInRadians);\n  if (this.ct) {\n    if (this.penDown) {\n      //this.logPenStatus();\n      this.ct.beginPath();\n      this.ct.lineWidth = this.lineWidth;\n      this.ct.strokeStyle = this.penColor;\n      this.ct.moveTo(x0, y0);\n      this.ct.lineTo(this.x, this.y);\n      this.ct.stroke();\n    }\n  } else {\n    this.ct.moveTo(this.x, this.y);\n  }\n  return this;\n};\nturtle.backward = function (length) {\n  this.forward(-length);\n  return this;\n};\n\n// turning\nturtle.left = function (angle) {\n  this.angle += angle;\n  return this;\n};\nturtle.right = function (angle) {\n  this.left(-angle);\n  return this;\n};\n\n// ===============================================================\n//                      Pattern Functions\n// ===============================================================\n\nturtle.hexagon = function () {\n  let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n  console.log('length', length);\n  var i;\n  for (i = 1; i <= 6; i++) {\n    turtle.forward(length);\n    turtle.left(60);\n  }\n};\nturtle.drawStar = function () {\n  var i;\n  for (i = 0; i < 18; i++) {\n    turtle.left(100);\n    turtle.forward(80);\n  }\n};\n\n//  Oh Wow Look at this space\n// =======================================================\nvar _c;\n$RefreshReg$(_c, \"ReactRoot\");","map":{"version":3,"names":["React","useState","ReactDOM","styles","useKeyboard","turtle","x","y","angle","penDown","penColor","lineWidth","ReactRoot","moveForward","turnLeft","turnRight","penIsDown","drawingStar","width","height","rotationSpeed","updatedAngle","movementSpeed","updatedPositionX","Math","cos","PI","updatedPositionY","sin","forward","drawStar","edgeGap","setX","setY","setAngle","setInterval","root","header","ellipseText","column","clearCanvas","button","canvasWrapper","left","top","transform","row","spacer","maxWidth","wrapper","document","getElementById","render","canvas","getContext","ct","alert","context","clearRect","logPenStatus","console","log","shiftLeft","length","shiftRight","shiftUp","shiftDown","x0","y0","angleInRadians","beginPath","strokeStyle","moveTo","lineTo","stroke","backward","right","hexagon","i"],"sources":["/Users/ericbollar/Desktop/BollarQuickenProject/src/index.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport styles from './styles.js';\n\n// use our keyboard listener\nimport { useKeyboard } from './hooks/useKeyboard';\n\n// const sizeEnum = {\n//     small: [800, 480],\n//     medium: [1024, 576],\n//     large: [1280, 720],\n//     'absolute unit': [1920, 1080],\n// };\n\nconst turtle = {\n    x: 360,\n    y: 200,\n    angle: 0,\n    penDown: true,\n    penColor: '#000000',\n    lineWidth: 2\n};\n// const moveArray = ['shiftLeft', 'shiftRight', 'shiftUp', 'shiftDown'];\n\nfunction ReactRoot() {\n    // grab deconstructed list of actions from keyboard listener\n    const {moveForward, turnLeft, turnRight, penIsDown, drawingStar} = useKeyboard();\n\n    // const [size, setSize] = useState('small');\n    const width = 800;\n    const height = 480;\n\n    // if turning, update the turtle's angle\n    const rotationSpeed = 0.05;\n    let updatedAngle = turtle.angle - (turnLeft ? rotationSpeed : 0) + (turnRight ? rotationSpeed : 0);\n    // want to restrict angle between 0 and 360 \n    while (updatedAngle > 360) {\n        updatedAngle -= 360;\n    }\n    while (updatedAngle < 0) {\n        updatedAngle += 360\n    }\n    turtle.angle = updatedAngle;\n\n    // if moving forward, update the turtle's position based on it's local forward direction\n    const movementSpeed = 0.01; \n        // this is really movement distance, the speed is dependent on how fast each frame renders\n        // so it is likely the case that when drawing, the turtle moves slower (rendering takes more processing)\n        // this is not the best way to do it, but for time's sake i will leave it like this\n        // improvement here would be separating the thread for movement and rendering\n    let updatedPositionX = Math.cos(turtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + turtle.x;\n    let updatedPositionY = Math.sin(turtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + turtle.y;\n    if (moveForward) {\n        // if drawing, draw! don't want to be drawing pen and star at same time, so prioritize penIsDown\n        if (penIsDown) {\n            turtle.forward(movementSpeed);\n        } else if (drawingStar) {\n            turtle.drawStar();\n        }\n        turtle.x = updatedPositionX;\n        turtle.y = updatedPositionY;\n    } else if (drawingStar) {\n        turtle.drawStar();\n    }\n\n    // keeps the turtle within the bounds of the canvas, I set this edgeGap arbitrarily\n    // it's a bit finniky because the turtle's position is not the center of the triangle\n    // improvement here would involve re-aligning the center of turtle\n    const edgeGap = 8;\n    if (updatedPositionX > width - edgeGap) {\n        updatedPositionX = edgeGap;\n    } else if (updatedPositionX < edgeGap) {\n        updatedPositionX = width - edgeGap;\n    }\n    if (updatedPositionY > height - edgeGap) {\n        updatedPositionY = edgeGap;\n    } else if (updatedPositionY < edgeGap) {\n        updatedPositionY = height - edgeGap;\n    }\n\n    // turtle position\n    const [x, setX] = useState(turtle.x);\n    const [y, setY] = useState(turtle.y);\n    const [angle, setAngle] = useState(turtle.angle);\n\n    setInterval(() => {\n        setX(turtle.x);\n        setY(turtle.y);\n        setAngle(turtle.angle);\n    }, 50);\n\n    return (\n        <div style={styles.root}>\n            <div style={styles.header}>\n                <h1 style={styles.ellipseText}>\n                    Eric Bollar Quicken Project\n                </h1>\n                {/* <div style={styles.stack}>\n                    <h4>\n                        Canvas Size:\n                    </h4>\n                    <div style={styles.row}>\n                        {Object.keys(sizeEnum).map((key) =>\n                            <button\n                                key={key}\n                                onClick={() => {setSize(key)}}\n                                style={{\n                                    ...styles.button,\n                                    backgroundColor: key === size && '#C9C7C5',\n                                    cursor: key !== size && 'pointer',\n                                }}\n                            >\n                                {key}\n                            </button>\n                        )}\n                    </div>\n                </div> */}\n            </div>\n            <div style={styles.column}>\n                <button\n                    onClick={clearCanvas}\n                    style={styles.button}\n                >\n                    Reset Canvas\n                </button>\n                <div style={{...styles.canvasWrapper, width: width + 2, height: height + 2 }}>\n                    <div\n                        style={{\n                            ...styles.turtle,\n                            left: x,\n                            top: y,\n                            transform: `rotate(${angle}DEG)`,\n                        }}\n                    />\n                    <canvas\n                        id=\"myDrawing\"\n                        width={width}\n                        height={height}\n                    />\n                </div>\n                {/* <h4 style={{ margin: 0 }}>\n                    TURTLE FUNCTIONS\n                </h4> */}\n\n                <div style={{ ...styles.row, ...styles.spacer}}>\n                    {/* {moveArray.map((key) =>\n                        <button\n                            key={key}\n                            onClick={() => turtle[key]()}\n                            style={styles.button}\n                        >\n                            {key}\n                        </button>\n                    )} */}\n                    \n                <p>Thanks for viewing my project! This is Turtle. You can move Turtle forward with 'W' and turn him with 'A' and 'D'.\n                    You can draw lines while moving by holding SPACE or by pressing '1', in which case Turtle will draw a star!\n                </p>\n                </div>\n\n                <div style={{ ...styles.row, maxWidth: width - 48 }}>\n                    {/* <button\n                        onClick={() => turtle.hexagon()}\n                        style={styles.blueButton}\n                    >\n                        Hexagon\n                    </button> */}\n                    {/* <button\n                        onClick={() => turtle.drawStar()}\n                        style={styles.blueButton}\n                    >\n                        Star\n                    </button> */}\n                    {/*\n                    // ================================================================================\n                    //                      Maybe things should go here?\n                    // ================================================================================\n                    */}\n                    {/* <button\n                        onClick={() => console.log('yo')}\n                        style={styles.blueButton}\n                    >\n                        Custom ???\n                    </button> */}\n                </div>\n            </div>\n        </div>\n    );\n}\n// react insertion\nconst wrapper = document.getElementById(\"react-entry\");\nwrapper ? ReactDOM.render(<ReactRoot />, wrapper) : false;\n\n\n\n\n// =====================================================================================\n//                                  GRAPHICS\n// =====================================================================================\n\n\n// canvas preparation\nconst canvas = document.getElementById('myDrawing');\n\nif (canvas && canvas.getContext) { // does the browser support 'canvas'?\n    turtle.ct = canvas.getContext(\"2d\"); // get drawing context\n} else {\n    alert('You need a browser which supports the HTML5 canvas!');\n}\n\nfunction clearCanvas () {\n    if (canvas && canvas.getContext) {\n        const context = canvas.getContext(\"2d\");\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        turtle.x = 360;\n        turtle.y = 200;\n    }\n}\n\n\n//      Turtle functions\n// =======================================================\nturtle.logPenStatus = function () {\n    console.log('x=' + this.x + \"; y=\" + this.y + '; angle = ' + this.angle + '; penDown = ' + this.penDown);\n};\n\n// reposition turtle\nturtle.shiftLeft = function (length=50) {\n    turtle.x -= length;\n};\nturtle.shiftRight = function (length=50) {\n    turtle.x += length;\n};\nturtle.shiftUp = function (length=50) {\n    turtle.y -= length;\n};\nturtle.shiftDown = function (length=50) {\n    turtle.y += length;\n};\n\n// draw in a direction\nturtle.forward = function (length) {\n    // this.logPenStatus();\n    var x0 = this.x,\n        y0 = this.y;\n    const angleInRadians = (this.angle * Math.PI) / 180;\n    this.x += length * Math.sin(angleInRadians);\n    this.y += length * Math.cos(angleInRadians);\n    if (this.ct) {\n        if (this.penDown) {\n            //this.logPenStatus();\n            this.ct.beginPath();\n            this.ct.lineWidth = this.lineWidth;\n            this.ct.strokeStyle = this.penColor;\n            this.ct.moveTo(x0, y0);\n            this.ct.lineTo(this.x, this.y);\n            this.ct.stroke();\n        }\n    } else {\n        this.ct.moveTo(this.x, this.y);\n    }\n    return this;\n};\nturtle.backward = function (length) {\n    this.forward(-length);\n    return this;\n};\n\n// turning\nturtle.left = function (angle) {\n    this.angle += angle;\n    return this;\n};\nturtle.right = function (angle) {\n    this.left(-angle);\n    return this;\n};\n\n\n// ===============================================================\n//                      Pattern Functions\n// ===============================================================\n\nturtle.hexagon = function (length=50) {\n    console.log('length', length);\n    var i;\n    for (i = 1; i <= 6; i++) {\n        turtle.forward(length);\n        turtle.left(60);\n\n    }\n};\n\nturtle.drawStar = function () {\n    var i;\n    for (i = 0; i < 18; i++) {\n        turtle.left(100);\n        turtle.forward(80);\n    }\n};\n\n\n\n//  Oh Wow Look at this space\n// =======================================================\n\n\n\n\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}