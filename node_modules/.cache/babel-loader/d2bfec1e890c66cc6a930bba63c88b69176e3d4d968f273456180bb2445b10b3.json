{"ast":null,"code":"var _jsxFileName = \"/Users/ericbollar/Desktop/BollarQuickenProject/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport TurtleGame from './TurtleGame';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('react-entry'));\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(TurtleGame, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 7,\n  columnNumber: 3\n}, this));\n\n// import React, { useState } from \"react\";\n// import ReactDOM from \"react-dom\";\n// import styles from './styles.js';\n\n// // use our keyboard listener\n// import { useKeyboard } from './hooks/useKeyboard';\n\n// const turtle = {\n//     x: 360,\n//     y: 200,\n//     angle: 0,\n//     penDown: true,\n//     penColor: '#000000',\n//     lineWidth: 2\n// };\n\n// function TurtleGame() {\n\n//     // turtle position\n//     const [x, setX] = useState(turtle.x);\n//     const [y, setY] = useState(turtle.y);\n//     const [angle, setAngle] = useState(turtle.angle);\n\n//     // grab deconstructed list of actions from keyboard listener\n//     const {moveForward, turnLeft, turnRight, penIsDown, drawingStar} = useKeyboard();\n\n//     // dimensions of canvas\n//     const width = 800;\n//     const height = 480;\n\n//     // if turning, update the turtle's angle\n//     const rotationSpeed = 0.05;\n//     let updatedAngle = turtle.angle - (turnLeft ? rotationSpeed : 0) + (turnRight ? rotationSpeed : 0);\n//     // want to restrict angle between 0 and 360 \n//     while (updatedAngle > 360) {\n//         updatedAngle -= 360;\n//     }\n//     while (updatedAngle < 0) {\n//         updatedAngle += 360\n//     }\n//     turtle.angle = updatedAngle;\n\n//     // if moving forward, update the turtle's position based on it's local forward direction\n//     const movementSpeed = 0.01; \n//         // this is really movement distance, the speed is dependent on how fast each frame renders\n//         // so it is likely the case that when drawing, the turtle moves slower (rendering takes more processing)\n//         // this is not the best way to do it, but for time's sake i will leave it like this\n//         // improvement here would be separating the thread for movement and rendering\n//     let updatedPositionX = Math.cos(turtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + turtle.x;\n//     let updatedPositionY = Math.sin(turtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + turtle.y;\n//     if (moveForward) {\n//         // if drawing, draw! don't want to be drawing pen and star at same time, so prioritize penIsDown\n//         if (penIsDown) {\n//             turtle.forward(movementSpeed);\n//         } else if (drawingStar) {\n//             turtle.drawStar();\n//         }\n\n//         // keeps the turtle within the bounds of the canvas, I set this edgeGap arbitrarily\n//         // it's a bit finniky because the turtle's position is not the center of the triangle\n//         // improvement here would involve re-aligning the center of turtle\n//         const edgeGap = 8;\n//         if (updatedPositionX > width - edgeGap) {\n//             updatedPositionX = edgeGap;\n//         } else if (updatedPositionX < edgeGap) {\n//             updatedPositionX = width - edgeGap;\n//         }\n//         if (updatedPositionY > height - edgeGap) {\n//             updatedPositionY = edgeGap;\n//         } else if (updatedPositionY < edgeGap) {\n//             updatedPositionY = height - edgeGap;\n//         }\n\n//         turtle.x = updatedPositionX;\n//         turtle.y = updatedPositionY;\n//     } else if (drawingStar) {\n//         turtle.drawStar();\n//     }\n\n//     // update state\n//     setInterval(() => {\n//         setX(turtle.x);\n//         setY(turtle.y);\n//         setAngle(turtle.angle);\n//     }, 50);\n\n//     return (\n//         <div style={styles.root}>\n//             <div style={styles.header}>\n//                 <h1 style={styles.ellipseText}>\n//                     Eric Bollar Quicken Project\n//                 </h1>\n//             </div>\n//             <div style={styles.column}>\n//                 <button\n//                     onClick={clearCanvas}\n//                     style={styles.button}\n//                 >\n//                     Reset Canvas\n//                 </button>\n//                 <div style={{...styles.canvasWrapper, width: width + 2, height: height + 2 }}>\n//                     <div\n//                         style={{\n//                             ...styles.turtle,\n//                             left: x,\n//                             top: y,\n//                             transform: `rotate(${angle}DEG)`,\n//                         }}\n//                     />\n//                     <canvas\n//                         id=\"myDrawing\"\n//                         width={width}\n//                         height={height}\n//                     />\n//                 </div>\n//                 {/* <h4 style={{ margin: 0 }}>\n//                     TURTLE FUNCTIONS\n//                 </h4> */}\n\n//                 <div style={{ ...styles.row, ...styles.spacer}}>\n//                     {/* {moveArray.map((key) =>\n//                         <button\n//                             key={key}\n//                             onClick={() => turtle[key]()}\n//                             style={styles.button}\n//                         >\n//                             {key}\n//                         </button>\n//                     )} */}\n\n//                 <p>Thanks for viewing my project! This is Turtle. You can move Turtle forward with 'W' and turn him with 'A' and 'D'.\n//                     You can draw lines while moving by holding SPACE or by pressing '1', in which case Turtle will draw a star!\n//                 </p>\n//                 </div>\n\n//                 <div style={{ ...styles.row, maxWidth: width - 48 }}>\n//                     {/* <button\n//                         onClick={() => turtle.hexagon()}\n//                         style={styles.blueButton}\n//                     >\n//                         Hexagon\n//                     </button> */}\n//                     {/* <button\n//                         onClick={() => turtle.drawStar()}\n//                         style={styles.blueButton}\n//                     >\n//                         Star\n//                     </button> */}\n//                     {/*\n//                     // ================================================================================\n//                     //                      Maybe things should go here?\n//                     // ================================================================================\n//                     */}\n//                     {/* <button\n//                         onClick={() => console.log('yo')}\n//                         style={styles.blueButton}\n//                     >\n//                         Custom ???\n//                     </button> */}\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// }\n\n// // react insertion\n// const wrapper = document.getElementById(\"react-entry\");\n// wrapper ? ReactDOM.render(<TurtleGame />, wrapper) : false;\n\n// // =====================================================================================\n// //                                  GRAPHICS\n// // =====================================================================================\n\n// // canvas preparation\n// const canvas = document.getElementById('myDrawing');\n\n// if (canvas && canvas.getContext) { // does the browser support 'canvas'?\n//     turtle.ct = canvas.getContext(\"2d\"); // get drawing context\n// } else {\n//     alert('You need a browser which supports the HTML5 canvas!');\n// }\n\n// function clearCanvas () {\n//     if (canvas && canvas.getContext) {\n//         const context = canvas.getContext(\"2d\");\n//         context.clearRect(0, 0, canvas.width, canvas.height);\n//         turtle.x = 360;\n//         turtle.y = 200;\n//     }\n// }\n\n// //      Turtle functions\n// // =======================================================\n// // turtle.logPenStatus = function () {\n// //     console.log('x=' + this.x + \"; y=\" + this.y + '; angle = ' + this.angle + '; penDown = ' + this.penDown);\n// // };\n\n// // // reposition turtle\n// // turtle.shiftLeft = function (length=50) {\n// //     turtle.x -= length;\n// // };\n// // turtle.shiftRight = function (length=50) {\n// //     turtle.x += length;\n// // };\n// // turtle.shiftUp = function (length=50) {\n// //     turtle.y -= length;\n// // };\n// // turtle.shiftDown = function (length=50) {\n// //     turtle.y += length;\n// // };\n\n// // draw in a direction\n// turtle.forward = function (length) {\n//     // this.logPenStatus();\n//     var x0 = this.x,\n//         y0 = this.y;\n//     const angleInRadians = (this.angle * Math.PI) / 180;\n//     this.x += length * Math.sin(angleInRadians);\n//     this.y += length * Math.cos(angleInRadians);\n//     if (this.ct) {\n//         if (this.penDown) {\n//             //this.logPenStatus();\n//             this.ct.beginPath();\n//             this.ct.lineWidth = this.lineWidth;\n//             this.ct.strokeStyle = this.penColor;\n//             this.ct.moveTo(x0, y0);\n//             this.ct.lineTo(this.x, this.y);\n//             this.ct.stroke();\n//         }\n//     } else {\n//         this.ct.moveTo(this.x, this.y);\n//     }\n//     return this;\n// };\n// // turtle.backward = function (length) {\n// //     this.forward(-length);\n// //     return this;\n// // };\n\n// // turning\n// turtle.left = function (angle) {\n//     this.angle += angle;\n//     return this;\n// };\n// turtle.right = function (angle) {\n//     this.left(-angle);\n//     return this;\n// };\n\n// // ===============================================================\n// //                      Pattern Functions\n// // ===============================================================\n\n// // turtle.hexagon = function (length=50) {\n// //     console.log('length', length);\n// //     var i;\n// //     for (i = 1; i <= 6; i++) {\n// //         turtle.forward(length);\n// //         turtle.left(60);\n\n// //     }\n// // };\n\n// turtle.drawStar = function () {\n//     var i;\n//     for (i = 0; i < 18; i++) {\n//         turtle.left(100);\n//         turtle.forward(80);\n//     }\n// };\n\n// //  Oh Wow Look at this space\n// // =======================================================","map":{"version":3,"names":["React","ReactDOM","TurtleGame","root","createRoot","document","getElementById","render"],"sources":["/Users/ericbollar/Desktop/BollarQuickenProject/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport TurtleGame from './TurtleGame';\n\nconst root = ReactDOM.createRoot(document.getElementById('react-entry'));\nroot.render(\n  <React.StrictMode>\n    <TurtleGame />\n  </React.StrictMode>\n);\n\n// import React, { useState } from \"react\";\n// import ReactDOM from \"react-dom\";\n// import styles from './styles.js';\n\n// // use our keyboard listener\n// import { useKeyboard } from './hooks/useKeyboard';\n\n// const turtle = {\n//     x: 360,\n//     y: 200,\n//     angle: 0,\n//     penDown: true,\n//     penColor: '#000000',\n//     lineWidth: 2\n// };\n\n// function TurtleGame() {\n\n//     // turtle position\n//     const [x, setX] = useState(turtle.x);\n//     const [y, setY] = useState(turtle.y);\n//     const [angle, setAngle] = useState(turtle.angle);\n    \n//     // grab deconstructed list of actions from keyboard listener\n//     const {moveForward, turnLeft, turnRight, penIsDown, drawingStar} = useKeyboard();\n\n//     // dimensions of canvas\n//     const width = 800;\n//     const height = 480;\n\n//     // if turning, update the turtle's angle\n//     const rotationSpeed = 0.05;\n//     let updatedAngle = turtle.angle - (turnLeft ? rotationSpeed : 0) + (turnRight ? rotationSpeed : 0);\n//     // want to restrict angle between 0 and 360 \n//     while (updatedAngle > 360) {\n//         updatedAngle -= 360;\n//     }\n//     while (updatedAngle < 0) {\n//         updatedAngle += 360\n//     }\n//     turtle.angle = updatedAngle;\n\n//     // if moving forward, update the turtle's position based on it's local forward direction\n//     const movementSpeed = 0.01; \n//         // this is really movement distance, the speed is dependent on how fast each frame renders\n//         // so it is likely the case that when drawing, the turtle moves slower (rendering takes more processing)\n//         // this is not the best way to do it, but for time's sake i will leave it like this\n//         // improvement here would be separating the thread for movement and rendering\n//     let updatedPositionX = Math.cos(turtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + turtle.x;\n//     let updatedPositionY = Math.sin(turtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + turtle.y;\n//     if (moveForward) {\n//         // if drawing, draw! don't want to be drawing pen and star at same time, so prioritize penIsDown\n//         if (penIsDown) {\n//             turtle.forward(movementSpeed);\n//         } else if (drawingStar) {\n//             turtle.drawStar();\n//         }\n\n//         // keeps the turtle within the bounds of the canvas, I set this edgeGap arbitrarily\n//         // it's a bit finniky because the turtle's position is not the center of the triangle\n//         // improvement here would involve re-aligning the center of turtle\n//         const edgeGap = 8;\n//         if (updatedPositionX > width - edgeGap) {\n//             updatedPositionX = edgeGap;\n//         } else if (updatedPositionX < edgeGap) {\n//             updatedPositionX = width - edgeGap;\n//         }\n//         if (updatedPositionY > height - edgeGap) {\n//             updatedPositionY = edgeGap;\n//         } else if (updatedPositionY < edgeGap) {\n//             updatedPositionY = height - edgeGap;\n//         }\n\n//         turtle.x = updatedPositionX;\n//         turtle.y = updatedPositionY;\n//     } else if (drawingStar) {\n//         turtle.drawStar();\n//     }\n\n//     // update state\n//     setInterval(() => {\n//         setX(turtle.x);\n//         setY(turtle.y);\n//         setAngle(turtle.angle);\n//     }, 50);\n\n//     return (\n//         <div style={styles.root}>\n//             <div style={styles.header}>\n//                 <h1 style={styles.ellipseText}>\n//                     Eric Bollar Quicken Project\n//                 </h1>\n//             </div>\n//             <div style={styles.column}>\n//                 <button\n//                     onClick={clearCanvas}\n//                     style={styles.button}\n//                 >\n//                     Reset Canvas\n//                 </button>\n//                 <div style={{...styles.canvasWrapper, width: width + 2, height: height + 2 }}>\n//                     <div\n//                         style={{\n//                             ...styles.turtle,\n//                             left: x,\n//                             top: y,\n//                             transform: `rotate(${angle}DEG)`,\n//                         }}\n//                     />\n//                     <canvas\n//                         id=\"myDrawing\"\n//                         width={width}\n//                         height={height}\n//                     />\n//                 </div>\n//                 {/* <h4 style={{ margin: 0 }}>\n//                     TURTLE FUNCTIONS\n//                 </h4> */}\n\n//                 <div style={{ ...styles.row, ...styles.spacer}}>\n//                     {/* {moveArray.map((key) =>\n//                         <button\n//                             key={key}\n//                             onClick={() => turtle[key]()}\n//                             style={styles.button}\n//                         >\n//                             {key}\n//                         </button>\n//                     )} */}\n                    \n//                 <p>Thanks for viewing my project! This is Turtle. You can move Turtle forward with 'W' and turn him with 'A' and 'D'.\n//                     You can draw lines while moving by holding SPACE or by pressing '1', in which case Turtle will draw a star!\n//                 </p>\n//                 </div>\n\n//                 <div style={{ ...styles.row, maxWidth: width - 48 }}>\n//                     {/* <button\n//                         onClick={() => turtle.hexagon()}\n//                         style={styles.blueButton}\n//                     >\n//                         Hexagon\n//                     </button> */}\n//                     {/* <button\n//                         onClick={() => turtle.drawStar()}\n//                         style={styles.blueButton}\n//                     >\n//                         Star\n//                     </button> */}\n//                     {/*\n//                     // ================================================================================\n//                     //                      Maybe things should go here?\n//                     // ================================================================================\n//                     */}\n//                     {/* <button\n//                         onClick={() => console.log('yo')}\n//                         style={styles.blueButton}\n//                     >\n//                         Custom ???\n//                     </button> */}\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// }\n\n// // react insertion\n// const wrapper = document.getElementById(\"react-entry\");\n// wrapper ? ReactDOM.render(<TurtleGame />, wrapper) : false;\n\n\n// // =====================================================================================\n// //                                  GRAPHICS\n// // =====================================================================================\n\n\n// // canvas preparation\n// const canvas = document.getElementById('myDrawing');\n\n// if (canvas && canvas.getContext) { // does the browser support 'canvas'?\n//     turtle.ct = canvas.getContext(\"2d\"); // get drawing context\n// } else {\n//     alert('You need a browser which supports the HTML5 canvas!');\n// }\n\n// function clearCanvas () {\n//     if (canvas && canvas.getContext) {\n//         const context = canvas.getContext(\"2d\");\n//         context.clearRect(0, 0, canvas.width, canvas.height);\n//         turtle.x = 360;\n//         turtle.y = 200;\n//     }\n// }\n\n\n// //      Turtle functions\n// // =======================================================\n// // turtle.logPenStatus = function () {\n// //     console.log('x=' + this.x + \"; y=\" + this.y + '; angle = ' + this.angle + '; penDown = ' + this.penDown);\n// // };\n\n// // // reposition turtle\n// // turtle.shiftLeft = function (length=50) {\n// //     turtle.x -= length;\n// // };\n// // turtle.shiftRight = function (length=50) {\n// //     turtle.x += length;\n// // };\n// // turtle.shiftUp = function (length=50) {\n// //     turtle.y -= length;\n// // };\n// // turtle.shiftDown = function (length=50) {\n// //     turtle.y += length;\n// // };\n\n// // draw in a direction\n// turtle.forward = function (length) {\n//     // this.logPenStatus();\n//     var x0 = this.x,\n//         y0 = this.y;\n//     const angleInRadians = (this.angle * Math.PI) / 180;\n//     this.x += length * Math.sin(angleInRadians);\n//     this.y += length * Math.cos(angleInRadians);\n//     if (this.ct) {\n//         if (this.penDown) {\n//             //this.logPenStatus();\n//             this.ct.beginPath();\n//             this.ct.lineWidth = this.lineWidth;\n//             this.ct.strokeStyle = this.penColor;\n//             this.ct.moveTo(x0, y0);\n//             this.ct.lineTo(this.x, this.y);\n//             this.ct.stroke();\n//         }\n//     } else {\n//         this.ct.moveTo(this.x, this.y);\n//     }\n//     return this;\n// };\n// // turtle.backward = function (length) {\n// //     this.forward(-length);\n// //     return this;\n// // };\n\n// // turning\n// turtle.left = function (angle) {\n//     this.angle += angle;\n//     return this;\n// };\n// turtle.right = function (angle) {\n//     this.left(-angle);\n//     return this;\n// };\n\n\n// // ===============================================================\n// //                      Pattern Functions\n// // ===============================================================\n\n// // turtle.hexagon = function (length=50) {\n// //     console.log('length', length);\n// //     var i;\n// //     for (i = 1; i <= 6; i++) {\n// //         turtle.forward(length);\n// //         turtle.left(60);\n\n// //     }\n// // };\n\n// turtle.drawStar = function () {\n//     var i;\n//     for (i = 0; i < 18; i++) {\n//         turtle.left(100);\n//         turtle.forward(80);\n//     }\n// };\n\n\n\n// //  Oh Wow Look at this space\n// // =======================================================\n\n\n\n\n\n\n\n\n\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,UAAU,MAAM,cAAc;AAAC;AAEtC,MAAMC,IAAI,GAAGF,QAAQ,CAACG,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC,CAAC;AACxEH,IAAI,CAACI,MAAM,eACT,QAAC,KAAK,CAAC,UAAU;EAAA,uBACf,QAAC,UAAU;IAAA;IAAA;IAAA;EAAA;AAAG;EAAA;EAAA;EAAA;AAAA,QACG,CACpB;;AAED;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}