{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nexport const useStore = () => {\n  _s();\n  const [values, setValues] = useState({\n    x: 360,\n    y: 200,\n    angle: 0,\n    penDown: true,\n    penColor: '#000000',\n    lineWidth: 2\n  });\n  return values;\n};\n_s(useStore, \"4LEYrArb2cTtR+L9Z3132v8PQcI=\");\nexport function updateRotation() {\n  // if turning, update the turtle's angle\n  const rotationSpeed = 0.05;\n  let updatedAngle = turtle.angle - (turnLeft ? rotationSpeed : 0) + (turnRight ? rotationSpeed : 0);\n  // want to restrict angle between 0 and 360 \n  while (updatedAngle > 360) {\n    updatedAngle -= 360;\n  }\n  while (updatedAngle < 0) {\n    updatedAngle += 360;\n  }\n  turtle.angle = updatedAngle;\n}\nexport function updatePosition() {\n  // if moving forward, update the turtle's position based on it's local forward direction\n  const movementSpeed = 0.01;\n  // this is really movement distance, the speed is dependent on how fast each frame renders\n  // so it is likely the case that when drawing, the turtle moves slower (rendering takes more processing)\n  // this is not the best way to do it, but for time's sake i will leave it like this\n  // improvement here would be separating the thread for movement and rendering\n  let updatedPositionX = Math.cos(turtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + turtle.x;\n  let updatedPositionY = Math.sin(turtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + turtle.y;\n  if (moveForward) {\n    // if drawing, draw! don't want to be drawing pen and star at same time, so prioritize penIsDown\n    if (penIsDown) {\n      turtle.forward(movementSpeed);\n    } else if (drawingStar) {\n      turtle.drawStar();\n    }\n\n    // keeps the turtle within the bounds of the canvas, I set this edgeGap arbitrarily\n    // it's a bit finniky because the turtle's position is not the center of the triangle\n    // improvement here would involve re-aligning the center of turtle\n    const edgeGap = 8;\n    if (updatedPositionX > width - edgeGap) {\n      updatedPositionX = edgeGap;\n    } else if (updatedPositionX < edgeGap) {\n      updatedPositionX = width - edgeGap;\n    }\n    if (updatedPositionY > height - edgeGap) {\n      updatedPositionY = edgeGap;\n    } else if (updatedPositionY < edgeGap) {\n      updatedPositionY = height - edgeGap;\n    }\n    turtle.x = updatedPositionX;\n    turtle.y = updatedPositionY;\n  } else if (drawingStar) {\n    turtle.drawStar();\n  }\n}\n\n// export const Turtle = props => {\n\n//     // turtle position\n//     const [x, setX] = useState(turtle.x);\n//     const [y, setY] = useState(turtle.y);\n//     const [angle, setAngle] = useState(turtle.angle);\n\n//     // update state\n//     setInterval(() => {\n//         setX(turtle.x);\n//         setY(turtle.y);\n//         setAngle(turtle.angle);\n//     }, 50);\n\n//     useEffect(() => {\n//         updatePosition();\n//     }, [moveForward])\n\n//     useEffect(() => {\n//         updateRotation();\n//     }, [turnLeft, turnRight])\n\n//     return <></>\n// }","map":{"version":3,"names":["React","useRef","useEffect","useStore","values","setValues","useState","x","y","angle","penDown","penColor","lineWidth","updateRotation","rotationSpeed","updatedAngle","turtle","turnLeft","turnRight","updatePosition","movementSpeed","updatedPositionX","Math","cos","PI","updatedPositionY","sin","moveForward","penIsDown","forward","drawingStar","drawStar","edgeGap","width","height"],"sources":["/Users/ericbollar/Desktop/BollarQuickenProject/src/hooks/useStore.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react'\n\nexport const useStore = () => {\n    const[values, setValues] = useState({\n        x: 360,\n        y: 200,\n        angle: 0,\n        penDown: true,\n        penColor: '#000000',\n        lineWidth: 2\n    })\n\n    return values;\n}\n\nexport function updateRotation() {\n    // if turning, update the turtle's angle\n    const rotationSpeed = 0.05;\n    let updatedAngle = turtle.angle - (turnLeft ? rotationSpeed : 0) + (turnRight ? rotationSpeed : 0);\n    // want to restrict angle between 0 and 360 \n    while (updatedAngle > 360) {\n        updatedAngle -= 360;\n    }\n    while (updatedAngle < 0) {\n        updatedAngle += 360\n    }\n    turtle.angle = updatedAngle;\n}\n\nexport function updatePosition() {\n    // if moving forward, update the turtle's position based on it's local forward direction\n    const movementSpeed = 0.01; \n        // this is really movement distance, the speed is dependent on how fast each frame renders\n        // so it is likely the case that when drawing, the turtle moves slower (rendering takes more processing)\n        // this is not the best way to do it, but for time's sake i will leave it like this\n        // improvement here would be separating the thread for movement and rendering\n    let updatedPositionX = Math.cos(turtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + turtle.x;\n    let updatedPositionY = Math.sin(turtle.angle * Math.PI / 180 + Math.PI / 2) * movementSpeed + turtle.y;\n    if (moveForward) {\n        // if drawing, draw! don't want to be drawing pen and star at same time, so prioritize penIsDown\n        if (penIsDown) {\n            turtle.forward(movementSpeed);\n        } else if (drawingStar) {\n            turtle.drawStar();\n        }\n\n        // keeps the turtle within the bounds of the canvas, I set this edgeGap arbitrarily\n        // it's a bit finniky because the turtle's position is not the center of the triangle\n        // improvement here would involve re-aligning the center of turtle\n        const edgeGap = 8;\n        if (updatedPositionX > width - edgeGap) {\n            updatedPositionX = edgeGap;\n        } else if (updatedPositionX < edgeGap) {\n            updatedPositionX = width - edgeGap;\n        }\n        if (updatedPositionY > height - edgeGap) {\n            updatedPositionY = edgeGap;\n        } else if (updatedPositionY < edgeGap) {\n            updatedPositionY = height - edgeGap;\n        }\n\n        turtle.x = updatedPositionX;\n        turtle.y = updatedPositionY;\n    } else if (drawingStar) {\n        turtle.drawStar();\n    }\n}\n\n// export const Turtle = props => {\n\n//     // turtle position\n//     const [x, setX] = useState(turtle.x);\n//     const [y, setY] = useState(turtle.y);\n//     const [angle, setAngle] = useState(turtle.angle);\n\n    \n\n    \n\n    \n\n//     // update state\n//     setInterval(() => {\n//         setX(turtle.x);\n//         setY(turtle.y);\n//         setAngle(turtle.angle);\n//     }, 50);\n\n//     useEffect(() => {\n//         updatePosition();\n//     }, [moveForward])\n\n//     useEffect(() => {\n//         updateRotation();\n//     }, [turnLeft, turnRight])\n\n//     return <></>\n// }"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAEhD,OAAO,MAAMC,QAAQ,GAAG,MAAM;EAAA;EAC1B,MAAK,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGC,QAAQ,CAAC;IAChCC,CAAC,EAAE,GAAG;IACNC,CAAC,EAAE,GAAG;IACNC,KAAK,EAAE,CAAC;IACRC,OAAO,EAAE,IAAI;IACbC,QAAQ,EAAE,SAAS;IACnBC,SAAS,EAAE;EACf,CAAC,CAAC;EAEF,OAAOR,MAAM;AACjB,CAAC;AAAA,GAXYD,QAAQ;AAarB,OAAO,SAASU,cAAc,GAAG;EAC7B;EACA,MAAMC,aAAa,GAAG,IAAI;EAC1B,IAAIC,YAAY,GAAGC,MAAM,CAACP,KAAK,IAAIQ,QAAQ,GAAGH,aAAa,GAAG,CAAC,CAAC,IAAII,SAAS,GAAGJ,aAAa,GAAG,CAAC,CAAC;EAClG;EACA,OAAOC,YAAY,GAAG,GAAG,EAAE;IACvBA,YAAY,IAAI,GAAG;EACvB;EACA,OAAOA,YAAY,GAAG,CAAC,EAAE;IACrBA,YAAY,IAAI,GAAG;EACvB;EACAC,MAAM,CAACP,KAAK,GAAGM,YAAY;AAC/B;AAEA,OAAO,SAASI,cAAc,GAAG;EAC7B;EACA,MAAMC,aAAa,GAAG,IAAI;EACtB;EACA;EACA;EACA;EACJ,IAAIC,gBAAgB,GAAGC,IAAI,CAACC,GAAG,CAACP,MAAM,CAACP,KAAK,GAAGa,IAAI,CAACE,EAAE,GAAG,GAAG,GAAGF,IAAI,CAACE,EAAE,GAAG,CAAC,CAAC,GAAGJ,aAAa,GAAGJ,MAAM,CAACT,CAAC;EACtG,IAAIkB,gBAAgB,GAAGH,IAAI,CAACI,GAAG,CAACV,MAAM,CAACP,KAAK,GAAGa,IAAI,CAACE,EAAE,GAAG,GAAG,GAAGF,IAAI,CAACE,EAAE,GAAG,CAAC,CAAC,GAAGJ,aAAa,GAAGJ,MAAM,CAACR,CAAC;EACtG,IAAImB,WAAW,EAAE;IACb;IACA,IAAIC,SAAS,EAAE;MACXZ,MAAM,CAACa,OAAO,CAACT,aAAa,CAAC;IACjC,CAAC,MAAM,IAAIU,WAAW,EAAE;MACpBd,MAAM,CAACe,QAAQ,EAAE;IACrB;;IAEA;IACA;IACA;IACA,MAAMC,OAAO,GAAG,CAAC;IACjB,IAAIX,gBAAgB,GAAGY,KAAK,GAAGD,OAAO,EAAE;MACpCX,gBAAgB,GAAGW,OAAO;IAC9B,CAAC,MAAM,IAAIX,gBAAgB,GAAGW,OAAO,EAAE;MACnCX,gBAAgB,GAAGY,KAAK,GAAGD,OAAO;IACtC;IACA,IAAIP,gBAAgB,GAAGS,MAAM,GAAGF,OAAO,EAAE;MACrCP,gBAAgB,GAAGO,OAAO;IAC9B,CAAC,MAAM,IAAIP,gBAAgB,GAAGO,OAAO,EAAE;MACnCP,gBAAgB,GAAGS,MAAM,GAAGF,OAAO;IACvC;IAEAhB,MAAM,CAACT,CAAC,GAAGc,gBAAgB;IAC3BL,MAAM,CAACR,CAAC,GAAGiB,gBAAgB;EAC/B,CAAC,MAAM,IAAIK,WAAW,EAAE;IACpBd,MAAM,CAACe,QAAQ,EAAE;EACrB;AACJ;;AAEA;;AAEA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}